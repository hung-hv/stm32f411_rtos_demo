
stm32f411_rtos_demo1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013050  20000070  08005fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200130c0  08005fb8  000230c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001577a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a1  00000000  00000000  0003585d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00038e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001104  00000000  00000000  0003a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001974f  00000000  00000000  0003b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a40e  00000000  00000000  00054c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb31  00000000  00000000  0006f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062c8  00000000  00000000  0010bb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00111e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005eb0 	.word	0x08005eb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005eb0 	.word	0x08005eb0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fd43 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f84b 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f943 	bl	8000774 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f000 f8af 	bl	8000650 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f2:	f000 f8db 	bl	80006ac <MX_I2S2_Init>
  MX_SPI1_Init();
 80004f6:	f000 f907 	bl	8000708 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  task_status = xTaskCreate(task1_handler, "Task_1", 200, "Hello world from task 1", 2, &task1_handle);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2302      	movs	r3, #2
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0x8c>)
 8000506:	22c8      	movs	r2, #200	; 0xc8
 8000508:	4918      	ldr	r1, [pc, #96]	; (800056c <main+0x90>)
 800050a:	4819      	ldr	r0, [pc, #100]	; (8000570 <main+0x94>)
 800050c:	f003 fa64 	bl	80039d8 <xTaskCreate>
 8000510:	6178      	str	r0, [r7, #20]
  configASSERT( task_status == pdPASS);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d00a      	beq.n	800052e <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051c:	f383 8811 	msr	BASEPRI, r3
 8000520:	f3bf 8f6f 	isb	sy
 8000524:	f3bf 8f4f 	dsb	sy
 8000528:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800052a:	bf00      	nop
 800052c:	e7fe      	b.n	800052c <main+0x50>
  task_status = xTaskCreate(task2_handler, "Task_2", 200, "Hello world from task 2", 2, &task2_handle);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2302      	movs	r3, #2
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <main+0x98>)
 8000538:	22c8      	movs	r2, #200	; 0xc8
 800053a:	490f      	ldr	r1, [pc, #60]	; (8000578 <main+0x9c>)
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <main+0xa0>)
 800053e:	f003 fa4b 	bl	80039d8 <xTaskCreate>
 8000542:	6178      	str	r0, [r7, #20]
  configASSERT( task_status == pdPASS);
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d00a      	beq.n	8000560 <main+0x84>
        __asm volatile
 800054a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054e:	f383 8811 	msr	BASEPRI, r3
 8000552:	f3bf 8f6f 	isb	sy
 8000556:	f3bf 8f4f 	dsb	sy
 800055a:	60fb      	str	r3, [r7, #12]
    }
 800055c:	bf00      	nop
 800055e:	e7fe      	b.n	800055e <main+0x82>

  /*start freeRTOS scheduler*/
  vTaskStartScheduler();
 8000560:	f003 fba4 	bl	8003cac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x88>
 8000566:	bf00      	nop
 8000568:	08005ec8 	.word	0x08005ec8
 800056c:	08005ee0 	.word	0x08005ee0
 8000570:	080009a9 	.word	0x080009a9
 8000574:	08005ee8 	.word	0x08005ee8
 8000578:	08005f00 	.word	0x08005f00
 800057c:	080009b9 	.word	0x080009b9

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 f9c4 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <SystemClock_Config+0xc8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b21      	ldr	r3, [pc, #132]	; (800064c <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <SystemClock_Config+0xcc>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 11;
 80005fc:	230b      	movs	r3, #11
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fd57 	bl	80020b8 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 f9ec 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2103      	movs	r1, #3
 8000630:	4618      	mov	r0, r3
 8000632:	f001 ffb9 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800063c:	f000 f9d6 	bl	80009ec <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f000 ff2f 	bl	80014f0 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f9a8 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2S2_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2S2_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2S2_Init+0x50>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2S2_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_I2S2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2S2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2S2_Init+0x50>)
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <MX_I2S2_Init+0x58>)
 80006d4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2S2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2S2_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2S2_Init+0x50>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2S2_Init+0x50>)
 80006ea:	f001 f845 	bl	8001778 <HAL_I2S_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f97a 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	40003800 	.word	0x40003800
 8000704:	00017700 	.word	0x00017700

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_SPI1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_SPI1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SPI1_Init+0x64>)
 8000754:	220a      	movs	r2, #10
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_SPI1_Init+0x64>)
 800075a:	f002 fab3 	bl	8002cc4 <HAL_SPI_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f942 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000128 	.word	0x20000128
 8000770:	40013000 	.word	0x40013000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <MX_GPIO_Init+0x220>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a80      	ldr	r2, [pc, #512]	; (8000994 <MX_GPIO_Init+0x220>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <MX_GPIO_Init+0x220>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b7a      	ldr	r3, [pc, #488]	; (8000994 <MX_GPIO_Init+0x220>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a79      	ldr	r2, [pc, #484]	; (8000994 <MX_GPIO_Init+0x220>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b77      	ldr	r3, [pc, #476]	; (8000994 <MX_GPIO_Init+0x220>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b73      	ldr	r3, [pc, #460]	; (8000994 <MX_GPIO_Init+0x220>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a72      	ldr	r2, [pc, #456]	; (8000994 <MX_GPIO_Init+0x220>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b70      	ldr	r3, [pc, #448]	; (8000994 <MX_GPIO_Init+0x220>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <MX_GPIO_Init+0x220>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a6b      	ldr	r2, [pc, #428]	; (8000994 <MX_GPIO_Init+0x220>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b69      	ldr	r3, [pc, #420]	; (8000994 <MX_GPIO_Init+0x220>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b65      	ldr	r3, [pc, #404]	; (8000994 <MX_GPIO_Init+0x220>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a64      	ldr	r2, [pc, #400]	; (8000994 <MX_GPIO_Init+0x220>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b62      	ldr	r3, [pc, #392]	; (8000994 <MX_GPIO_Init+0x220>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <MX_GPIO_Init+0x220>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a5d      	ldr	r2, [pc, #372]	; (8000994 <MX_GPIO_Init+0x220>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b5b      	ldr	r3, [pc, #364]	; (8000994 <MX_GPIO_Init+0x220>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4858      	ldr	r0, [pc, #352]	; (8000998 <MX_GPIO_Init+0x224>)
 8000838:	f000 fe40 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4856      	ldr	r0, [pc, #344]	; (800099c <MX_GPIO_Init+0x228>)
 8000842:	f000 fe3b 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800084c:	4854      	ldr	r0, [pc, #336]	; (80009a0 <MX_GPIO_Init+0x22c>)
 800084e:	f000 fe35 	bl	80014bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000852:	2304      	movs	r3, #4
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	484c      	ldr	r0, [pc, #304]	; (8000998 <MX_GPIO_Init+0x224>)
 8000866:	f000 fca5 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4845      	ldr	r0, [pc, #276]	; (8000998 <MX_GPIO_Init+0x224>)
 8000882:	f000 fc97 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000886:	2332      	movs	r3, #50	; 0x32
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	483f      	ldr	r0, [pc, #252]	; (8000998 <MX_GPIO_Init+0x224>)
 800089c:	f000 fc8a 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4839      	ldr	r0, [pc, #228]	; (800099c <MX_GPIO_Init+0x228>)
 80008b8:	f000 fc7c 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008bc:	2301      	movs	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4834      	ldr	r0, [pc, #208]	; (80009a4 <MX_GPIO_Init+0x230>)
 80008d2:	f000 fc6f 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d6:	2310      	movs	r3, #16
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e6:	2306      	movs	r3, #6
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	482c      	ldr	r0, [pc, #176]	; (80009a4 <MX_GPIO_Init+0x230>)
 80008f2:	f000 fc5f 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4824      	ldr	r0, [pc, #144]	; (80009a0 <MX_GPIO_Init+0x22c>)
 8000910:	f000 fc50 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000914:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000926:	2306      	movs	r3, #6
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	481a      	ldr	r0, [pc, #104]	; (800099c <MX_GPIO_Init+0x228>)
 8000932:	f000 fc3f 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_GPIO_Init+0x230>)
 800094c:	f000 fc32 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000962:	230a      	movs	r3, #10
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_GPIO_Init+0x230>)
 800096e:	f000 fc21 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x22c>)
 8000986:	f000 fc15 	bl	80011b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	; 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000

080009a8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f004 fed3 	bl	800575c <puts>
 80009b6:	e7fb      	b.n	80009b0 <task1_handler+0x8>

080009b8 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f004 fecb 	bl	800575c <puts>
 80009c6:	e7fb      	b.n	80009c0 <task2_handler+0x8>

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 fae9 	bl	8000fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40000c00 	.word	0x40000c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa4:	f000 fb86 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	; 0x40
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <HAL_I2S_MspInit+0x118>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d16c      	bne.n	8000be6 <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000b10:	2332      	movs	r3, #50	; 0x32
 8000b12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000b14:	2308      	movs	r3, #8
 8000b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 ff7f 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000b2c:	f7ff ff5e 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a27      	ldr	r2, [pc, #156]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_I2S_MspInit+0x11c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b84:	2304      	movs	r3, #4
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b94:	2306      	movs	r3, #6
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4816      	ldr	r0, [pc, #88]	; (8000bf8 <HAL_I2S_MspInit+0x120>)
 8000ba0:	f000 fb08 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <HAL_I2S_MspInit+0x120>)
 8000bc0:	f000 faf8 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000bc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_I2S_MspInit+0x124>)
 8000be2:	f000 fae7 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40003800 	.word	0x40003800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5a:	23e0      	movs	r3, #224	; 0xe0
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_SPI_MspInit+0x8c>)
 8000c76:	f000 fa9d 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <HAL_InitTick+0xe4>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <HAL_InitTick+0xe4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	f107 0210 	add.w	r2, r7, #16
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fe7a 	bl	80029c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd6:	f001 fe5f 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8000cda:	6378      	str	r0, [r7, #52]	; 0x34
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cde:	f001 fe5b 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <HAL_InitTick+0xe8>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <HAL_InitTick+0xec>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <HAL_InitTick+0xf0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_InitTick+0xec>)
 8000cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_InitTick+0xec>)
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_InitTick+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_InitTick+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <HAL_InitTick+0xec>)
 8000d1e:	f002 f85a 	bl	8002dd6 <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d30:	4812      	ldr	r0, [pc, #72]	; (8000d7c <HAL_InitTick+0xec>)
 8000d32:	f002 f8a9 	bl	8002e88 <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d44:	2032      	movs	r0, #50	; 0x32
 8000d46:	f000 fa27 	bl	8001198 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d808      	bhi.n	8000d62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2032      	movs	r0, #50	; 0x32
 8000d56:	f000 fa03 	bl	8001160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_InitTick+0xf4>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e002      	b.n	8000d68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3738      	adds	r7, #56	; 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	20000180 	.word	0x20000180
 8000d80:	40000c00 	.word	0x40000c00
 8000d84:	20000004 	.word	0x20000004

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM5_IRQHandler+0x10>)
 8000dba:	f002 f8c7 	bl	8002f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000180 	.word	0x20000180

08000dc8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <ITM_SendChar+0x48>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <ITM_SendChar+0x48>)
 8000dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ddc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <ITM_SendChar+0x4c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <ITM_SendChar+0x4c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000dea:	bf00      	nop
 8000dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f8      	beq.n	8000dec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000dfa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	6013      	str	r3, [r2, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000edfc 	.word	0xe000edfc
 8000e14:	e0000e00 	.word	0xe0000e00

08000e18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
  }

  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e009      	b.n	8000e78 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffab 	bl	8000dc8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf1      	blt.n	8000e64 <_write+0x12>
  }
  return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_close>:

int _close(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_isatty>:

int _isatty(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff ffd7 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f004 fd37 	bl	80059b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fac7 	bl	80004dc <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f5c:	08005f48 	.word	0x08005f48
  ldr r2, =_sbss
 8000f60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f64:	200130c0 	.word	0x200130c0

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f8d8 	bl	800114a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fe78 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fd2a 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200001c8 	.word	0x200001c8

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200001c8 	.word	0x200001c8

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff4c 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff61 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ffb1 	bl	80010e4 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff80 	bl	8001090 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff54 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e159      	b.n	8001484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8148 	bne.w	800147e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a2 	beq.w	800147e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b57      	ldr	r3, [pc, #348]	; (800149c <HAL_GPIO_Init+0x2e8>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a56      	ldr	r2, [pc, #344]	; (800149c <HAL_GPIO_Init+0x2e8>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b54      	ldr	r3, [pc, #336]	; (800149c <HAL_GPIO_Init+0x2e8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_GPIO_Init+0x2ec>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x202>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x2f4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x1fe>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x2f8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x1fa>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <HAL_GPIO_Init+0x2fc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x1f6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a45      	ldr	r2, [pc, #276]	; (80014b4 <HAL_GPIO_Init+0x300>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x1f2>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x2ec>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_GPIO_Init+0x304>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x304>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_GPIO_Init+0x304>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144e:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_GPIO_Init+0x304>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_GPIO_Init+0x304>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f aea2 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e12b      	b.n	800175a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fa96 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f001 fa20 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a81      	ldr	r2, [pc, #516]	; (8001764 <HAL_I2C_Init+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a80      	ldr	r2, [pc, #512]	; (8001768 <HAL_I2C_Init+0x278>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a7d      	ldr	r2, [pc, #500]	; (800176c <HAL_I2C_Init+0x27c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0e7      	b.n	800175a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a78      	ldr	r2, [pc, #480]	; (8001770 <HAL_I2C_Init+0x280>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	; (8001764 <HAL_I2C_Init+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a69      	ldr	r2, [pc, #420]	; (8001774 <HAL_I2C_Init+0x284>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	495c      	ldr	r1, [pc, #368]	; (8001764 <HAL_I2C_Init+0x274>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d819      	bhi.n	800162c <HAL_I2C_Init+0x13c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_I2C_Init+0x138>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e59      	subs	r1, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	3301      	adds	r3, #1
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	e051      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001628:	2304      	movs	r3, #4
 800162a:	e04f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_I2C_Init+0x168>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e012      	b.n	800167e <HAL_I2C_Init+0x18e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Init+0x196>
 8001682:	2301      	movs	r3, #1
 8001684:	e022      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <HAL_I2C_Init+0x1bc>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	440b      	add	r3, r1
 800169c:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	6809      	ldr	r1, [r1, #0]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6911      	ldr	r1, [r2, #16]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	000186a0 	.word	0x000186a0
 8001768:	001e847f 	.word	0x001e847f
 800176c:	003d08ff 	.word	0x003d08ff
 8001770:	431bde83 	.word	0x431bde83
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e128      	b.n	80019dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a90      	ldr	r2, [pc, #576]	; (80019e4 <HAL_I2S_Init+0x26c>)
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff f997 	bl	8000ad8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2202      	movs	r2, #2
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017c0:	f023 030f 	bic.w	r3, r3, #15
 80017c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2202      	movs	r2, #2
 80017cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d060      	beq.n	8001898 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80017de:	2310      	movs	r3, #16
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e001      	b.n	80017e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d802      	bhi.n	80017f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f001 fa04 	bl	8002c04 <HAL_RCCEx_GetPeriphCLKFreq>
 80017fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001806:	d125      	bne.n	8001854 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	fbb2 f2f3 	udiv	r2, r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	3305      	adds	r3, #5
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e01f      	b.n	8001872 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	fbb2 f2f3 	udiv	r2, r2, r3
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	3305      	adds	r3, #5
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	e00e      	b.n	8001872 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fbb2 f2f3 	udiv	r2, r2, r3
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	3305      	adds	r3, #5
 8001870:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4a5c      	ldr	r2, [pc, #368]	; (80019e8 <HAL_I2S_Init+0x270>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	e003      	b.n	80018a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d902      	bls.n	80018ac <HAL_I2S_Init+0x134>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2bff      	cmp	r3, #255	; 0xff
 80018aa:	d907      	bls.n	80018bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e08f      	b.n	80019dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	ea42 0103 	orr.w	r1, r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018da:	f023 030f 	bic.w	r3, r3, #15
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6851      	ldr	r1, [r2, #4]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6892      	ldr	r2, [r2, #8]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68d2      	ldr	r2, [r2, #12]
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6992      	ldr	r2, [r2, #24]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d161      	bne.n	80019cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a38      	ldr	r2, [pc, #224]	; (80019ec <HAL_I2S_Init+0x274>)
 800190c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <HAL_I2S_Init+0x278>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_I2S_Init+0x1a4>
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_I2S_Init+0x27c>)
 800191a:	e001      	b.n	8001920 <HAL_I2S_Init+0x1a8>
 800191c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	4932      	ldr	r1, [pc, #200]	; (80019f0 <HAL_I2S_Init+0x278>)
 8001928:	428a      	cmp	r2, r1
 800192a:	d101      	bne.n	8001930 <HAL_I2S_Init+0x1b8>
 800192c:	4a31      	ldr	r2, [pc, #196]	; (80019f4 <HAL_I2S_Init+0x27c>)
 800192e:	e001      	b.n	8001934 <HAL_I2S_Init+0x1bc>
 8001930:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <HAL_I2S_Init+0x278>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_I2S_Init+0x1d4>
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_I2S_Init+0x27c>)
 800194a:	e001      	b.n	8001950 <HAL_I2S_Init+0x1d8>
 800194c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001950:	2202      	movs	r2, #2
 8001952:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_I2S_Init+0x278>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_I2S_Init+0x1ea>
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <HAL_I2S_Init+0x27c>)
 8001960:	e001      	b.n	8001966 <HAL_I2S_Init+0x1ee>
 8001962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001972:	d003      	beq.n	800197c <HAL_I2S_Init+0x204>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e001      	b.n	8001988 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001992:	4313      	orrs	r3, r2
 8001994:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800199c:	4313      	orrs	r3, r2
 800199e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_I2S_Init+0x278>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_I2S_Init+0x24c>
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_I2S_Init+0x27c>)
 80019c2:	e001      	b.n	80019c8 <HAL_I2S_Init+0x250>
 80019c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019c8:	897a      	ldrh	r2, [r7, #10]
 80019ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	08001aef 	.word	0x08001aef
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	08001c05 	.word	0x08001c05
 80019f0:	40003800 	.word	0x40003800
 80019f4:	40003400 	.word	0x40003400

080019f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	1c9a      	adds	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10e      	bne.n	8001a88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffb8 	bl	80019f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	1c9a      	adds	r2, r3, #2
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10e      	bne.n	8001ae6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ad6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff93 	bl	8001a0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d13a      	bne.n	8001b80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d109      	bne.n	8001b28 <I2S_IRQHandler+0x3a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d102      	bne.n	8001b28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb4 	bl	8001a90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d126      	bne.n	8001b80 <I2S_IRQHandler+0x92>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d11f      	bne.n	8001b80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0202 	orr.w	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff50 	bl	8001a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d136      	bne.n	8001bfa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d109      	bne.n	8001baa <I2S_IRQHandler+0xbc>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	d102      	bne.n	8001baa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff45 	bl	8001a34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d122      	bne.n	8001bfa <I2S_IRQHandler+0x10c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d11b      	bne.n	8001bfa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	f043 0204 	orr.w	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff13 	bl	8001a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a92      	ldr	r2, [pc, #584]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c1e:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c20:	e001      	b.n	8001c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a8b      	ldr	r2, [pc, #556]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c3e:	e001      	b.n	8001c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d004      	beq.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8099 	bne.w	8001d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f925 	bl	8001ec0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f9c8 	bl	8002020 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	d13a      	bne.n	8001d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d035      	beq.n	8001d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cb0:	e001      	b.n	8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4969      	ldr	r1, [pc, #420]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cbe:	428b      	cmp	r3, r1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001cc2:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cc4:	e001      	b.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f043 0202 	orr.w	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fe88 	bl	8001a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	f040 80c3 	bne.w	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80bd 	beq.w	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d44:	e001      	b.n	8001d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4944      	ldr	r1, [pc, #272]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d52:	428b      	cmp	r3, r1
 8001d54:	d101      	bne.n	8001d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d56:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d58:	e001      	b.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fe4a 	bl	8001a20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d8c:	e089      	b.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d107      	bne.n	8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8be 	bl	8001f24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8fd 	bl	8001fbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d12f      	bne.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02a      	beq.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001de4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d101      	bne.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df2:	e001      	b.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4919      	ldr	r1, [pc, #100]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e00:	428b      	cmp	r3, r1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e06:	e001      	b.n	8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fdfa 	bl	8001a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d136      	bne.n	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d031      	beq.n	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4902      	ldr	r1, [pc, #8]	; (8001e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001e5e:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e60:	e006      	b.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001e62:	bf00      	nop
 8001e64:	40003800 	.word	0x40003800
 8001e68:	40003400 	.word	0x40003400
 8001e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fdc0 	bl	8001a20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea0:	e000      	b.n	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ea2:	bf00      	nop
}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	1c99      	adds	r1, r3, #2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6251      	str	r1, [r2, #36]	; 0x24
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d113      	bne.n	8001f1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffc9 	bl	8001eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	1c99      	adds	r1, r3, #2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6251      	str	r1, [r2, #36]	; 0x24
 8001f36:	8819      	ldrh	r1, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <I2SEx_TxISR_I2SExt+0x22>
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8001f44:	e001      	b.n	8001f4a <I2SEx_TxISR_I2SExt+0x26>
 8001f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <I2SEx_TxISR_I2SExt+0x50>
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8001f72:	e001      	b.n	8001f78 <I2SEx_TxISR_I2SExt+0x54>
 8001f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <I2SEx_TxISR_I2SExt+0x90>)
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d101      	bne.n	8001f88 <I2SEx_TxISR_I2SExt+0x64>
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <I2SEx_TxISR_I2SExt+0x94>)
 8001f86:	e001      	b.n	8001f8c <I2SEx_TxISR_I2SExt+0x68>
 8001f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff81 	bl	8001eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40003800 	.word	0x40003800
 8001fb8:	40003400 	.word	0x40003400

08001fbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68d8      	ldr	r0, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	1c99      	adds	r1, r3, #2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fd4:	b282      	uxth	r2, r0
 8001fd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d113      	bne.n	8002018 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ffe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff4a 	bl	8001eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <I2SEx_RxISR_I2SExt+0x90>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <I2SEx_RxISR_I2SExt+0x16>
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <I2SEx_RxISR_I2SExt+0x94>)
 8002034:	e001      	b.n	800203a <I2SEx_RxISR_I2SExt+0x1a>
 8002036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203a:	68d8      	ldr	r0, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	1c99      	adds	r1, r3, #2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002046:	b282      	uxth	r2, r0
 8002048:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d121      	bne.n	80020a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <I2SEx_RxISR_I2SExt+0x90>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <I2SEx_RxISR_I2SExt+0x50>
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <I2SEx_RxISR_I2SExt+0x94>)
 800206e:	e001      	b.n	8002074 <I2SEx_RxISR_I2SExt+0x54>
 8002070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	490d      	ldr	r1, [pc, #52]	; (80020b0 <I2SEx_RxISR_I2SExt+0x90>)
 800207c:	428b      	cmp	r3, r1
 800207e:	d101      	bne.n	8002084 <I2SEx_RxISR_I2SExt+0x64>
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <I2SEx_RxISR_I2SExt+0x94>)
 8002082:	e001      	b.n	8002088 <I2SEx_RxISR_I2SExt+0x68>
 8002084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800208c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff03 	bl	8001eac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40003800 	.word	0x40003800
 80020b4:	40003400 	.word	0x40003400

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e267      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e242      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6f      	ldr	r2, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe ff32 	bl	8000fd8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe ff2e 	bl	8000fd8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e207      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe ff1e 	bl	8000fd8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7fe ff1a 	bl	8000fd8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f3      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c7      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fed3 	bl	8000fd8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7fe fecf 	bl	8000fd8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a8      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe feb2 	bl	8000fd8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe feae 	bl	8000fd8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e187      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d036      	beq.n	8002310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fe92 	bl	8000fd8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7fe fe8e 	bl	8000fd8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e167      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
 80022d6:	e01b      	b.n	8002310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fe7b 	bl	8000fd8 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	e00e      	b.n	8002304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe fe77 	bl	8000fd8 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d907      	bls.n	8002304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e150      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
 8002300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ea      	bne.n	80022e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8097 	beq.w	800244c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a73      	ldr	r2, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe fe37 	bl	8000fd8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe fe33 	bl	8000fd8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e10c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x30c>
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023c4:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fdf8 	bl	8000fd8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fdf4 	bl	8000fd8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0cb      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCC_OscConfig+0x334>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe fde2 	bl	8000fd8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fdde 	bl	8000fd8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b5      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a1 	beq.w	8002598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d05c      	beq.n	800251c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d141      	bne.n	80024ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fdb2 	bl	8000fd8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fdae 	bl	8000fd8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e087      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fd87 	bl	8000fd8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fd83 	bl	8000fd8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e05c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x416>
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fd70 	bl	8000fd8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fd6c 	bl	8000fd8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e045      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e038      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
 8002530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d028      	beq.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fc9e 	bl	8000fd8 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fc9a 	bl	8000fd8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fa9e 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	08005f20 	.word	0x08005f20
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b094      	sub	sp, #80	; 0x50
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
 8002780:	2300      	movs	r3, #0
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002784:	2300      	movs	r3, #0
 8002786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4b79      	ldr	r3, [pc, #484]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00d      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002798:	2b08      	cmp	r3, #8
 800279a:	f200 80e1 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 80027a6:	e0db      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_GetSysClockFreq+0x204>)
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027ac:	e0db      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_GetSysClockFreq+0x208>)
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b2:	e0d8      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	0159      	lsls	r1, r3, #5
 80027f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f8:	0150      	lsls	r0, r2, #5
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4621      	mov	r1, r4
 8002800:	1a51      	subs	r1, r2, r1
 8002802:	6139      	str	r1, [r7, #16]
 8002804:	4629      	mov	r1, r5
 8002806:	eb63 0301 	sbc.w	r3, r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	018b      	lsls	r3, r1, #6
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002822:	4651      	mov	r1, sl
 8002824:	018a      	lsls	r2, r1, #6
 8002826:	4651      	mov	r1, sl
 8002828:	ebb2 0801 	subs.w	r8, r2, r1
 800282c:	4659      	mov	r1, fp
 800282e:	eb63 0901 	sbc.w	r9, r3, r1
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002846:	4690      	mov	r8, r2
 8002848:	4699      	mov	r9, r3
 800284a:	4623      	mov	r3, r4
 800284c:	eb18 0303 	adds.w	r3, r8, r3
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	462b      	mov	r3, r5
 8002854:	eb49 0303 	adc.w	r3, r9, r3
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002866:	4629      	mov	r1, r5
 8002868:	024b      	lsls	r3, r1, #9
 800286a:	4621      	mov	r1, r4
 800286c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002870:	4621      	mov	r1, r4
 8002872:	024a      	lsls	r2, r1, #9
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287a:	2200      	movs	r2, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
 800287e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002884:	f7fd fcac 	bl	80001e0 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	e058      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	2200      	movs	r2, #0
 800289a:	4618      	mov	r0, r3
 800289c:	4611      	mov	r1, r2
 800289e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	0159      	lsls	r1, r3, #5
 80028ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028be:	0150      	lsls	r0, r2, #5
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4641      	mov	r1, r8
 80028c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ca:	4649      	mov	r1, r9
 80028cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028e4:	ebb2 040a 	subs.w	r4, r2, sl
 80028e8:	eb63 050b 	sbc.w	r5, r3, fp
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	00eb      	lsls	r3, r5, #3
 80028f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fa:	00e2      	lsls	r2, r4, #3
 80028fc:	4614      	mov	r4, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	4643      	mov	r3, r8
 8002902:	18e3      	adds	r3, r4, r3
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	464b      	mov	r3, r9
 8002908:	eb45 0303 	adc.w	r3, r5, r3
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291a:	4629      	mov	r1, r5
 800291c:	028b      	lsls	r3, r1, #10
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002924:	4621      	mov	r1, r4
 8002926:	028a      	lsls	r2, r1, #10
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	61fa      	str	r2, [r7, #28]
 8002934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002938:	f7fd fc52 	bl	80001e0 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x204>)
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002968:	4618      	mov	r0, r3
 800296a:	3750      	adds	r7, #80	; 0x50
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08005f30 	.word	0x08005f30

080029c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	220f      	movs	r2, #15
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_RCC_GetClockConfig+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0207 	and.w	r2, r3, #7
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d038      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fac1 	bl	8000fd8 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a5a:	f7fe fabd 	bl	8000fd8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0bd      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	495a      	ldr	r1, [pc, #360]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fa9e 	bl	8000fd8 <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aa0:	f7fe fa9a 	bl	8000fd8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e09a      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8083 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a42      	ldr	r2, [pc, #264]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fa70 	bl	8000fd8 <HAL_GetTick>
 8002af8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fa6c 	bl	8000fd8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e06c      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02f      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d028      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b4e:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d114      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fa3a 	bl	8000fd8 <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fa36 	bl	8000fd8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e034      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b96:	d10d      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	4909      	ldr	r1, [pc, #36]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7d1a      	ldrb	r2, [r3, #20]
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002be4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	42470068 	.word	0x42470068
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470e40 	.word	0x42470e40
 8002c00:	424711e0 	.word	0x424711e0

08002c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d140      	bne.n	8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d131      	bne.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c38:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002c3a:	617b      	str	r3, [r7, #20]
          break;
 8002c3c:	e031      	b.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c56:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e008      	b.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8c:	0f1b      	lsrs	r3, r3, #28
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
          break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
          break;
 8002ca0:	bf00      	nop
        }
      }
      break;
 8002ca2:	bf00      	nop
    }
  }
  return frequency;
 8002ca4:	697b      	ldr	r3, [r7, #20]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00bb8000 	.word	0x00bb8000
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	00f42400 	.word	0x00f42400

08002cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07b      	b.n	8002dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d009      	beq.n	8002cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd ff72 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0104 	and.w	r1, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0210 	and.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e041      	b.n	8002e6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f839 	bl	8002e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f000 f9c9 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e044      	b.n	8002f2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eca:	d013      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a19      	ldr	r2, [pc, #100]	; (8002f40 <HAL_TIM_Base_Start_IT+0xb8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d111      	bne.n	8002f18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d010      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	e007      	b.n	8002f28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40014000 	.word	0x40014000

08002f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0202 	mvn.w	r2, #2
 8002f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8ee 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8e0 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8f1 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0204 	mvn.w	r2, #4
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8c4 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8b6 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f8c7 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b08      	cmp	r3, #8
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0208 	mvn.w	r2, #8
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2204      	movs	r2, #4
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f89a 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f88c 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f89d 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b10      	cmp	r3, #16
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2208      	movs	r2, #8
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f870 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f862 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f873 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0201 	mvn.w	r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fc7c 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b80      	cmp	r3, #128	; 0x80
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8e2 	bl	80032c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f838 	bl	8003198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0220 	mvn.w	r2, #32
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8ac 	bl	80032ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <TIM_Base_SetConfig+0xe4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00f      	beq.n	80031e4 <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a31      	ldr	r2, [pc, #196]	; (8003294 <TIM_Base_SetConfig+0xe8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a30      	ldr	r2, [pc, #192]	; (8003298 <TIM_Base_SetConfig+0xec>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x38>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a2f      	ldr	r2, [pc, #188]	; (800329c <TIM_Base_SetConfig+0xf0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <TIM_Base_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01b      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d017      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <TIM_Base_SetConfig+0xe8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a21      	ldr	r2, [pc, #132]	; (8003298 <TIM_Base_SetConfig+0xec>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00f      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <TIM_Base_SetConfig+0xf0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <TIM_Base_SetConfig+0xf4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <TIM_Base_SetConfig+0xf8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <TIM_Base_SetConfig+0xfc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <TIM_Base_SetConfig+0xe4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d103      	bne.n	800327c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	615a      	str	r2, [r3, #20]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800

080032ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 0208 	add.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f103 0208 	add.w	r2, r3, #8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f103 0208 	add.w	r2, r3, #8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d103      	bne.n	800334e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e00c      	b.n	8003368 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3308      	adds	r3, #8
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e002      	b.n	800335c <vListInsert+0x2e>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	d2f6      	bcs.n	8003356 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6892      	ldr	r2, [r2, #8]
 80033b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6852      	ldr	r2, [r2, #4]
 80033c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d103      	bne.n	80033d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericReset+0x2e>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
    }
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05d      	beq.n	80034e4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d059      	beq.n	80034e4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2100      	movs	r1, #0
 800343a:	fba3 2302 	umull	r2, r3, r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d000      	beq.n	8003444 <xQueueGenericReset+0x50>
 8003442:	2101      	movs	r1, #1
 8003444:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	d14c      	bne.n	80034e4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800344a:	f001 fdd5 	bl	8004ff8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	6939      	ldr	r1, [r7, #16]
 8003458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	441a      	add	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2200      	movs	r2, #0
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	3b01      	subs	r3, #1
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	441a      	add	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d114      	bne.n	80034ca <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3310      	adds	r3, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ff45 	bl	800433c <xTaskRemoveFromEventList>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <xQueueGenericReset+0x11c>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	e009      	b.n	80034de <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3310      	adds	r3, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff00 	bl	80032d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fefb 	bl	80032d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80034de:	f001 fdbb 	bl	8005058 <vPortExitCritical>
 80034e2:	e001      	b.n	80034e8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <xQueueGenericReset+0x110>
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60bb      	str	r3, [r7, #8]
    }
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003504:	697b      	ldr	r3, [r7, #20]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02e      	beq.n	800358a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800352c:	2100      	movs	r1, #0
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	fba3 2302 	umull	r2, r3, r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d000      	beq.n	800353c <xQueueGenericCreate+0x28>
 800353a:	2101      	movs	r1, #1
 800353c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d123      	bne.n	800358a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800354a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800354e:	d81c      	bhi.n	800358a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3350      	adds	r3, #80	; 0x50
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fe2c 	bl	80051bc <pvPortMalloc>
 8003564:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01c      	beq.n	80035a6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3350      	adds	r3, #80	; 0x50
 8003574:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003576:	79fa      	ldrb	r2, [r7, #7]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f814 	bl	80035b0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003588:	e00d      	b.n	80035a6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xQueueGenericCreate+0x92>
        __asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	613b      	str	r3, [r7, #16]
    }
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80035a6:	69fb      	ldr	r3, [r7, #28]
    }
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e002      	b.n	80035d2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035de:	2101      	movs	r1, #1
 80035e0:	69b8      	ldr	r0, [r7, #24]
 80035e2:	f7ff ff07 	bl	80033f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	; 0x30
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <xQueueReceive+0x30>
        __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	623b      	str	r3, [r7, #32]
    }
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <xQueueReceive+0x3e>
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueReceive+0x42>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueReceive+0x44>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueReceive+0x5e>
        __asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61fb      	str	r3, [r7, #28]
    }
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003656:	f001 f881 	bl	800475c <xTaskGetSchedulerState>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <xQueueReceive+0x6e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <xQueueReceive+0x72>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueReceive+0x74>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueReceive+0x8e>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
    }
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003686:	f001 fcb7 	bl	8004ff8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01f      	beq.n	80036d6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800369a:	f000 f88d 	bl	80037b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00f      	beq.n	80036ce <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	3310      	adds	r3, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fe42 	bl	800433c <xTaskRemoveFromEventList>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <xQueueReceive+0x1bc>)
 80036c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80036ce:	f001 fcc3 	bl	8005058 <vPortExitCritical>
                return pdPASS;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e069      	b.n	80037aa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80036dc:	f001 fcbc 	bl	8005058 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e062      	b.n	80037aa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80036ea:	f107 0310 	add.w	r3, r7, #16
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fefa 	bl	80044e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80036f8:	f001 fcae 	bl	8005058 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80036fc:	f000 fb28 	bl	8003d50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003700:	f001 fc7a 	bl	8004ff8 <vPortEnterCritical>
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d103      	bne.n	800371a <xQueueReceive+0x122>
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003720:	b25b      	sxtb	r3, r3
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d103      	bne.n	8003730 <xQueueReceive+0x138>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003730:	f001 fc92 	bl	8005058 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003734:	1d3a      	adds	r2, r7, #4
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fee9 	bl	8004514 <xTaskCheckForTimeOut>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d123      	bne.n	8003790 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374a:	f000 f8ad 	bl	80038a8 <prvIsQueueEmpty>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd83 	bl	8004268 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003764:	f000 f84e 	bl	8003804 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003768:	f000 fb00 	bl	8003d6c <xTaskResumeAll>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d189      	bne.n	8003686 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <xQueueReceive+0x1bc>)
 8003774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	e780      	b.n	8003686 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003786:	f000 f83d 	bl	8003804 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800378a:	f000 faef 	bl	8003d6c <xTaskResumeAll>
 800378e:	e77a      	b.n	8003686 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003792:	f000 f837 	bl	8003804 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003796:	f000 fae9 	bl	8003d6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800379a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800379c:	f000 f884 	bl	80038a8 <prvIsQueueEmpty>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f43f af6f 	beq.w	8003686 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80037a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3730      	adds	r7, #48	; 0x30
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d303      	bcc.n	80037ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68d9      	ldr	r1, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f002 f904 	bl	8005a04 <memcpy>
    }
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800380c:	f001 fbf4 	bl	8004ff8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003818:	e011      	b.n	800383e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3324      	adds	r3, #36	; 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd88 	bl	800433c <xTaskRemoveFromEventList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003832:	f000 fed5 	bl	80045e0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3b01      	subs	r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	dce9      	bgt.n	800381a <prvUnlockQueue+0x16>
 8003846:	e000      	b.n	800384a <prvUnlockQueue+0x46>
                    break;
 8003848:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003852:	f001 fc01 	bl	8005058 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003856:	f001 fbcf 	bl	8004ff8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003860:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003862:	e011      	b.n	8003888 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3310      	adds	r3, #16
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fd63 	bl	800433c <xTaskRemoveFromEventList>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800387c:	f000 feb0 	bl	80045e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	3b01      	subs	r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800388c:	2b00      	cmp	r3, #0
 800388e:	dce9      	bgt.n	8003864 <prvUnlockQueue+0x60>
 8003890:	e000      	b.n	8003894 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003892:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800389c:	f001 fbdc 	bl	8005058 <vPortExitCritical>
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80038b0:	f001 fba2 	bl	8004ff8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e001      	b.n	80038c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80038c6:	f001 fbc7 	bl	8005058 <vPortExitCritical>

    return xReturn;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <vQueueAddToRegistry+0x2a>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60fb      	str	r3, [r7, #12]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d024      	beq.n	800394e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e01e      	b.n	8003948 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800390a:	4a18      	ldr	r2, [pc, #96]	; (800396c <vQueueAddToRegistry+0x98>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d105      	bne.n	8003926 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4a13      	ldr	r2, [pc, #76]	; (800396c <vQueueAddToRegistry+0x98>)
 8003920:	4413      	add	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
                    break;
 8003924:	e013      	b.n	800394e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <vQueueAddToRegistry+0x6e>
 800392c:	4a0f      	ldr	r2, [pc, #60]	; (800396c <vQueueAddToRegistry+0x98>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <vQueueAddToRegistry+0x98>)
 800393e:	4413      	add	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b07      	cmp	r3, #7
 800394c:	d9dd      	bls.n	800390a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	200001cc 	.word	0x200001cc

08003970 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003980:	f001 fb3a 	bl	8004ff8 <vPortEnterCritical>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800398a:	b25b      	sxtb	r3, r3
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d103      	bne.n	800399a <vQueueWaitForMessageRestricted+0x2a>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d103      	bne.n	80039b0 <vQueueWaitForMessageRestricted+0x40>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b0:	f001 fb52 	bl	8005058 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3324      	adds	r3, #36	; 0x24
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fc73 	bl	80042b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff1a 	bl	8003804 <prvUnlockQueue>
    }
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af04      	add	r7, sp, #16
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fbe5 	bl	80051bc <pvPortMalloc>
 80039f2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039fa:	2058      	movs	r0, #88	; 0x58
 80039fc:	f001 fbde 	bl	80051bc <pvPortMalloc>
 8003a00:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003a08:	2258      	movs	r2, #88	; 0x58
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	69f8      	ldr	r0, [r7, #28]
 8003a0e:	f001 ff85 	bl	800591c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
 8003a18:	e005      	b.n	8003a26 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f001 fc88 	bl	8005330 <vPortFree>
 8003a20:	e001      	b.n	8003a26 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f80e 	bl	8003a64 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003a48:	69f8      	ldr	r0, [r7, #28]
 8003a4a:	f000 f899 	bl	8003b80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e002      	b.n	8003a5a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
    }
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	21a5      	movs	r1, #165	; 0xa5
 8003a7e:	f001 ff4d 	bl	800591c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <prvInitialiseNewTask+0x58>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	617b      	str	r3, [r7, #20]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01e      	beq.n	8003b00 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	e012      	b.n	8003aee <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	7819      	ldrb	r1, [r3, #0]
 8003ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3334      	adds	r3, #52	; 0x34
 8003ad8:	460a      	mov	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d9e9      	bls.n	8003ac8 <prvInitialiseNewTask+0x64>
 8003af4:	e000      	b.n	8003af8 <prvInitialiseNewTask+0x94>
            {
                break;
 8003af6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d90a      	bls.n	8003b1c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	613b      	str	r3, [r7, #16]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d901      	bls.n	8003b26 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b22:	2304      	movs	r3, #4
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b30:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	3304      	adds	r3, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fbec 	bl	8003314 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	3318      	adds	r3, #24
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fbe7 	bl	8003314 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f1c3 0205 	rsb	r2, r3, #5
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	69b8      	ldr	r0, [r7, #24]
 8003b62:	f001 f91d 	bl	8004da0 <pxPortInitialiseStack>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b78:	bf00      	nop
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b88:	f001 fa36 	bl	8004ff8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b8c:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <prvAddNewTaskToReadyList+0x110>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a3f      	ldr	r2, [pc, #252]	; (8003c90 <prvAddNewTaskToReadyList+0x110>)
 8003b94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b96:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <prvAddNewTaskToReadyList+0x114>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b9e:	4a3d      	ldr	r2, [pc, #244]	; (8003c94 <prvAddNewTaskToReadyList+0x114>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <prvAddNewTaskToReadyList+0x110>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d110      	bne.n	8003bce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003bac:	f000 fd3c 	bl	8004628 <prvInitialiseTaskLists>
 8003bb0:	e00d      	b.n	8003bce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <prvAddNewTaskToReadyList+0x118>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <prvAddNewTaskToReadyList+0x114>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d802      	bhi.n	8003bce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003bc8:	4a32      	ldr	r2, [pc, #200]	; (8003c94 <prvAddNewTaskToReadyList+0x114>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <prvAddNewTaskToReadyList+0x11c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <prvAddNewTaskToReadyList+0x11c>)
 8003bd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <prvAddNewTaskToReadyList+0x11c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	2201      	movs	r2, #1
 8003be6:	409a      	lsls	r2, r3
 8003be8:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <prvAddNewTaskToReadyList+0x120>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <prvAddNewTaskToReadyList+0x120>)
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	492b      	ldr	r1, [pc, #172]	; (8003ca4 <prvAddNewTaskToReadyList+0x124>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3304      	adds	r3, #4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	3204      	adds	r2, #4
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <prvAddNewTaskToReadyList+0x124>)
 8003c36:	441a      	add	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4918      	ldr	r1, [pc, #96]	; (8003ca4 <prvAddNewTaskToReadyList+0x124>)
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <prvAddNewTaskToReadyList+0x124>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4403      	add	r3, r0
 8003c5c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c5e:	f001 f9fb 	bl	8005058 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <prvAddNewTaskToReadyList+0x118>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <prvAddNewTaskToReadyList+0x114>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d207      	bcs.n	8003c88 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <prvAddNewTaskToReadyList+0x128>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200002e4 	.word	0x200002e4
 8003c94:	2000020c 	.word	0x2000020c
 8003c98:	200002f0 	.word	0x200002f0
 8003c9c:	20000300 	.word	0x20000300
 8003ca0:	200002ec 	.word	0x200002ec
 8003ca4:	20000210 	.word	0x20000210
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <vTaskStartScheduler+0x88>)
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2282      	movs	r2, #130	; 0x82
 8003cbe:	491e      	ldr	r1, [pc, #120]	; (8003d38 <vTaskStartScheduler+0x8c>)
 8003cc0:	481e      	ldr	r0, [pc, #120]	; (8003d3c <vTaskStartScheduler+0x90>)
 8003cc2:	f7ff fe89 	bl	80039d8 <xTaskCreate>
 8003cc6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d102      	bne.n	8003cd4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003cce:	f000 fde3 	bl	8004898 <xTimerCreateTimerTask>
 8003cd2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d116      	bne.n	8003d08 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60bb      	str	r3, [r7, #8]
    }
 8003cec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <vTaskStartScheduler+0x94>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <vTaskStartScheduler+0x98>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <vTaskStartScheduler+0x9c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003d02:	f001 f8d7 	bl	8004eb4 <xPortStartScheduler>
 8003d06:	e00e      	b.n	8003d26 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0e:	d10a      	bne.n	8003d26 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	607b      	str	r3, [r7, #4]
    }
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <vTaskStartScheduler+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000308 	.word	0x20000308
 8003d38:	08005f08 	.word	0x08005f08
 8003d3c:	080045f9 	.word	0x080045f9
 8003d40:	20000304 	.word	0x20000304
 8003d44:	200002f0 	.word	0x200002f0
 8003d48:	200002e8 	.word	0x200002e8
 8003d4c:	2000000c 	.word	0x2000000c

08003d50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a03      	ldr	r2, [pc, #12]	; (8003d68 <vTaskSuspendAll+0x18>)
 8003d5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	2000030c 	.word	0x2000030c

08003d6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d7a:	4b71      	ldr	r3, [pc, #452]	; (8003f40 <xTaskResumeAll+0x1d4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <xTaskResumeAll+0x2c>
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
    }
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d98:	f001 f92e 	bl	8004ff8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d9c:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <xTaskResumeAll+0x1d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a67      	ldr	r2, [pc, #412]	; (8003f40 <xTaskResumeAll+0x1d4>)
 8003da4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da6:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <xTaskResumeAll+0x1d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 80c0 	bne.w	8003f30 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003db0:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <xTaskResumeAll+0x1d8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80bb 	beq.w	8003f30 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dba:	e08a      	b.n	8003ed2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dbc:	4b62      	ldr	r3, [pc, #392]	; (8003f48 <xTaskResumeAll+0x1dc>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	6a12      	ldr	r2, [r2, #32]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	69d2      	ldr	r2, [r2, #28]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3318      	adds	r3, #24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d103      	bne.n	8003df2 <xTaskResumeAll+0x86>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2200      	movs	r2, #0
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	68d2      	ldr	r2, [r2, #12]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	3304      	adds	r3, #4
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d103      	bne.n	8003e30 <xTaskResumeAll+0xc4>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2200      	movs	r2, #0
 8003e34:	615a      	str	r2, [r3, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <xTaskResumeAll+0x1e0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <xTaskResumeAll+0x1e0>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	493e      	ldr	r1, [pc, #248]	; (8003f50 <xTaskResumeAll+0x1e4>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3304      	adds	r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	3204      	adds	r2, #4
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <xTaskResumeAll+0x1e4>)
 8003e96:	441a      	add	r2, r3
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	615a      	str	r2, [r3, #20]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	492b      	ldr	r1, [pc, #172]	; (8003f50 <xTaskResumeAll+0x1e4>)
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	4827      	ldr	r0, [pc, #156]	; (8003f50 <xTaskResumeAll+0x1e4>)
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4403      	add	r3, r0
 8003ebc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <xTaskResumeAll+0x1e8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <xTaskResumeAll+0x1ec>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <xTaskResumeAll+0x1dc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af70 	bne.w	8003dbc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003ee2:	f000 fc1f 	bl	8004724 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <xTaskResumeAll+0x1f0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003ef2:	f000 f847 	bl	8003f84 <xTaskIncrementTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <xTaskResumeAll+0x1ec>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f1      	bne.n	8003ef2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <xTaskResumeAll+0x1f0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xTaskResumeAll+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <xTaskResumeAll+0x1f4>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f30:	f001 f892 	bl	8005058 <vPortExitCritical>

    return xAlreadyYielded;
 8003f34:	69bb      	ldr	r3, [r7, #24]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000030c 	.word	0x2000030c
 8003f44:	200002e4 	.word	0x200002e4
 8003f48:	200002a4 	.word	0x200002a4
 8003f4c:	200002ec 	.word	0x200002ec
 8003f50:	20000210 	.word	0x20000210
 8003f54:	2000020c 	.word	0x2000020c
 8003f58:	200002f8 	.word	0x200002f8
 8003f5c:	200002f4 	.word	0x200002f4
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <xTaskGetTickCount+0x1c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f70:	687b      	ldr	r3, [r7, #4]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	200002e8 	.word	0x200002e8

08003f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f8e:	4b7d      	ldr	r3, [pc, #500]	; (8004184 <xTaskIncrementTick+0x200>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 80ec 	bne.w	8004170 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f98:	4b7b      	ldr	r3, [pc, #492]	; (8004188 <xTaskIncrementTick+0x204>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fa0:	4a79      	ldr	r2, [pc, #484]	; (8004188 <xTaskIncrementTick+0x204>)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d120      	bne.n	8003fee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fac:	4b77      	ldr	r3, [pc, #476]	; (800418c <xTaskIncrementTick+0x208>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <xTaskIncrementTick+0x48>
        __asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	607b      	str	r3, [r7, #4]
    }
 8003fc8:	bf00      	nop
 8003fca:	e7fe      	b.n	8003fca <xTaskIncrementTick+0x46>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <xTaskIncrementTick+0x208>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <xTaskIncrementTick+0x20c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6d      	ldr	r2, [pc, #436]	; (800418c <xTaskIncrementTick+0x208>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <xTaskIncrementTick+0x20c>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <xTaskIncrementTick+0x210>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <xTaskIncrementTick+0x210>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	f000 fb9b 	bl	8004724 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <xTaskIncrementTick+0x214>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	f0c0 80a6 	bcc.w	8004146 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffa:	4b64      	ldr	r3, [pc, #400]	; (800418c <xTaskIncrementTick+0x208>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <xTaskIncrementTick+0x214>)
 8004006:	f04f 32ff 	mov.w	r2, #4294967295
 800400a:	601a      	str	r2, [r3, #0]
                    break;
 800400c:	e09b      	b.n	8004146 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <xTaskIncrementTick+0x208>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004026:	4a5c      	ldr	r2, [pc, #368]	; (8004198 <xTaskIncrementTick+0x214>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800402c:	e08b      	b.n	8004146 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	68d2      	ldr	r2, [r2, #12]
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	6892      	ldr	r2, [r2, #8]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	3304      	adds	r3, #4
 8004050:	429a      	cmp	r2, r3
 8004052:	d103      	bne.n	800405c <xTaskIncrementTick+0xd8>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2200      	movs	r2, #0
 8004060:	615a      	str	r2, [r3, #20]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1e5a      	subs	r2, r3, #1
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01e      	beq.n	80040b2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	6a12      	ldr	r2, [r2, #32]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	69d2      	ldr	r2, [r2, #28]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	3318      	adds	r3, #24
 8004096:	429a      	cmp	r2, r3
 8004098:	d103      	bne.n	80040a2 <xTaskIncrementTick+0x11e>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2200      	movs	r2, #0
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2201      	movs	r2, #1
 80040b8:	409a      	lsls	r2, r3
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <xTaskIncrementTick+0x218>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	4a36      	ldr	r2, [pc, #216]	; (800419c <xTaskIncrementTick+0x218>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	4935      	ldr	r1, [pc, #212]	; (80041a0 <xTaskIncrementTick+0x21c>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3304      	adds	r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	3204      	adds	r2, #4
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <xTaskIncrementTick+0x21c>)
 8004108:	441a      	add	r2, r3
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	615a      	str	r2, [r3, #20]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	4923      	ldr	r1, [pc, #140]	; (80041a0 <xTaskIncrementTick+0x21c>)
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	481f      	ldr	r0, [pc, #124]	; (80041a0 <xTaskIncrementTick+0x21c>)
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <xTaskIncrementTick+0x220>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	429a      	cmp	r2, r3
 800413c:	f67f af5d 	bls.w	8003ffa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004144:	e759      	b.n	8003ffa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004146:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <xTaskIncrementTick+0x220>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4914      	ldr	r1, [pc, #80]	; (80041a0 <xTaskIncrementTick+0x21c>)
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d901      	bls.n	8004162 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800415e:	2301      	movs	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <xTaskIncrementTick+0x224>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e004      	b.n	800417a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <xTaskIncrementTick+0x228>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <xTaskIncrementTick+0x228>)
 8004178:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	; 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000030c 	.word	0x2000030c
 8004188:	200002e8 	.word	0x200002e8
 800418c:	2000029c 	.word	0x2000029c
 8004190:	200002a0 	.word	0x200002a0
 8004194:	200002fc 	.word	0x200002fc
 8004198:	20000304 	.word	0x20000304
 800419c:	200002ec 	.word	0x200002ec
 80041a0:	20000210 	.word	0x20000210
 80041a4:	2000020c 	.word	0x2000020c
 80041a8:	200002f8 	.word	0x200002f8
 80041ac:	200002f4 	.word	0x200002f4

080041b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <vTaskSwitchContext+0xa4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <vTaskSwitchContext+0xa8>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80041c4:	e03f      	b.n	8004246 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <vTaskSwitchContext+0xa8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <vTaskSwitchContext+0xac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80041da:	7afb      	ldrb	r3, [r7, #11]
 80041dc:	f1c3 031f 	rsb	r3, r3, #31
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	491f      	ldr	r1, [pc, #124]	; (8004260 <vTaskSwitchContext+0xb0>)
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <vTaskSwitchContext+0x5c>
        __asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	607b      	str	r3, [r7, #4]
    }
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <vTaskSwitchContext+0x5a>
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <vTaskSwitchContext+0xb0>)
 8004218:	4413      	add	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3308      	adds	r3, #8
 800422e:	429a      	cmp	r2, r3
 8004230:	d104      	bne.n	800423c <vTaskSwitchContext+0x8c>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <vTaskSwitchContext+0xb4>)
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000030c 	.word	0x2000030c
 8004258:	200002f8 	.word	0x200002f8
 800425c:	200002ec 	.word	0x200002ec
 8004260:	20000210 	.word	0x20000210
 8004264:	2000020c 	.word	0x2000020c

08004268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <vTaskPlaceOnEventList+0x44>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3318      	adds	r3, #24
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff f849 	bl	800332e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800429c:	2101      	movs	r1, #1
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f000 fa7a 	bl	8004798 <prvAddCurrentTaskToDelayedList>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000020c 	.word	0x2000020c

080042b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	613b      	str	r3, [r7, #16]
    }
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <vTaskPlaceOnEventListRestricted+0x88>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	61da      	str	r2, [r3, #28]
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <vTaskPlaceOnEventListRestricted+0x88>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	621a      	str	r2, [r3, #32]
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <vTaskPlaceOnEventListRestricted+0x88>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	3218      	adds	r2, #24
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <vTaskPlaceOnEventListRestricted+0x88>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f103 0218 	add.w	r2, r3, #24
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <vTaskPlaceOnEventListRestricted+0x88>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68b8      	ldr	r0, [r7, #8]
 800432a:	f000 fa35 	bl	8004798 <prvAddCurrentTaskToDelayedList>
    }
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000020c 	.word	0x2000020c

0800433c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800433c:	b480      	push	{r7}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60fb      	str	r3, [r7, #12]
    }
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	6a12      	ldr	r2, [r2, #32]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	69d2      	ldr	r2, [r2, #28]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	3318      	adds	r3, #24
 800438a:	429a      	cmp	r2, r3
 800438c:	d103      	bne.n	8004396 <xTaskRemoveFromEventList+0x5a>
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <xTaskRemoveFromEventList+0x194>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d15e      	bne.n	800446c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	68d2      	ldr	r2, [r2, #12]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	6892      	ldr	r2, [r2, #8]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	3304      	adds	r3, #4
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d103      	bne.n	80043dc <xTaskRemoveFromEventList+0xa0>
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2200      	movs	r2, #0
 80043e0:	615a      	str	r2, [r3, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <xTaskRemoveFromEventList+0x198>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	4a36      	ldr	r2, [pc, #216]	; (80044d4 <xTaskRemoveFromEventList+0x198>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4935      	ldr	r1, [pc, #212]	; (80044d8 <xTaskRemoveFromEventList+0x19c>)
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3304      	adds	r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	3204      	adds	r2, #4
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <xTaskRemoveFromEventList+0x19c>)
 8004442:	441a      	add	r2, r3
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	615a      	str	r2, [r3, #20]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4922      	ldr	r1, [pc, #136]	; (80044d8 <xTaskRemoveFromEventList+0x19c>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	481e      	ldr	r0, [pc, #120]	; (80044d8 <xTaskRemoveFromEventList+0x19c>)
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4403      	add	r3, r0
 8004468:	6019      	str	r1, [r3, #0]
 800446a:	e01b      	b.n	80044a4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <xTaskRemoveFromEventList+0x1a0>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	61da      	str	r2, [r3, #28]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	621a      	str	r2, [r3, #32]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	3218      	adds	r2, #24
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f103 0218 	add.w	r2, r3, #24
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <xTaskRemoveFromEventList+0x1a0>)
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <xTaskRemoveFromEventList+0x1a0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <xTaskRemoveFromEventList+0x1a0>)
 80044a2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <xTaskRemoveFromEventList+0x1a4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d905      	bls.n	80044be <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <xTaskRemoveFromEventList+0x1a8>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e001      	b.n	80044c2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	372c      	adds	r7, #44	; 0x2c
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	2000030c 	.word	0x2000030c
 80044d4:	200002ec 	.word	0x200002ec
 80044d8:	20000210 	.word	0x20000210
 80044dc:	200002a4 	.word	0x200002a4
 80044e0:	2000020c 	.word	0x2000020c
 80044e4:	200002f8 	.word	0x200002f8

080044e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <vTaskInternalSetTimeOutState+0x24>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <vTaskInternalSetTimeOutState+0x28>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	605a      	str	r2, [r3, #4]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	200002fc 	.word	0x200002fc
 8004510:	200002e8 	.word	0x200002e8

08004514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
    }
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
    }
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004556:	f000 fd4f 	bl	8004ff8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <xTaskCheckForTimeOut+0xc4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d102      	bne.n	800457a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e026      	b.n	80045c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <xTaskCheckForTimeOut+0xc8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d00a      	beq.n	800459c <xTaskCheckForTimeOut+0x88>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	429a      	cmp	r2, r3
 800458e:	d305      	bcc.n	800459c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e015      	b.n	80045c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d20b      	bcs.n	80045be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad2      	subs	r2, r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff98 	bl	80044e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e004      	b.n	80045c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045c8:	f000 fd46 	bl	8005058 <vPortExitCritical>

    return xReturn;
 80045cc:	69fb      	ldr	r3, [r7, #28]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200002e8 	.word	0x200002e8
 80045dc:	200002fc 	.word	0x200002fc

080045e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <vTaskMissedYield+0x14>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	200002f8 	.word	0x200002f8

080045f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004600:	f000 f852 	bl	80046a8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <prvIdleTask+0x28>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d9f9      	bls.n	8004600 <prvIdleTask+0x8>
            {
                taskYIELD();
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <prvIdleTask+0x2c>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800461c:	e7f0      	b.n	8004600 <prvIdleTask+0x8>
 800461e:	bf00      	nop
 8004620:	20000210 	.word	0x20000210
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	e00c      	b.n	800464e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <prvInitialiseTaskLists+0x60>)
 8004640:	4413      	add	r3, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fe46 	bl	80032d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3301      	adds	r3, #1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d9ef      	bls.n	8004634 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004654:	480d      	ldr	r0, [pc, #52]	; (800468c <prvInitialiseTaskLists+0x64>)
 8004656:	f7fe fe3d 	bl	80032d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800465a:	480d      	ldr	r0, [pc, #52]	; (8004690 <prvInitialiseTaskLists+0x68>)
 800465c:	f7fe fe3a 	bl	80032d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <prvInitialiseTaskLists+0x6c>)
 8004662:	f7fe fe37 	bl	80032d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004666:	480c      	ldr	r0, [pc, #48]	; (8004698 <prvInitialiseTaskLists+0x70>)
 8004668:	f7fe fe34 	bl	80032d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800466c:	480b      	ldr	r0, [pc, #44]	; (800469c <prvInitialiseTaskLists+0x74>)
 800466e:	f7fe fe31 	bl	80032d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <prvInitialiseTaskLists+0x78>)
 8004674:	4a05      	ldr	r2, [pc, #20]	; (800468c <prvInitialiseTaskLists+0x64>)
 8004676:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvInitialiseTaskLists+0x7c>)
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <prvInitialiseTaskLists+0x68>)
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000210 	.word	0x20000210
 800468c:	20000274 	.word	0x20000274
 8004690:	20000288 	.word	0x20000288
 8004694:	200002a4 	.word	0x200002a4
 8004698:	200002b8 	.word	0x200002b8
 800469c:	200002d0 	.word	0x200002d0
 80046a0:	2000029c 	.word	0x2000029c
 80046a4:	200002a0 	.word	0x200002a0

080046a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ae:	e019      	b.n	80046e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80046b0:	f000 fca2 	bl	8004ff8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b4:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <prvCheckTasksWaitingTermination+0x50>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fe6d 	bl	80033a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <prvCheckTasksWaitingTermination+0x54>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <prvCheckTasksWaitingTermination+0x54>)
 80046ce:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <prvCheckTasksWaitingTermination+0x58>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <prvCheckTasksWaitingTermination+0x58>)
 80046d8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80046da:	f000 fcbd 	bl	8005058 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f810 	bl	8004704 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <prvCheckTasksWaitingTermination+0x58>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e1      	bne.n	80046b0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200002b8 	.word	0x200002b8
 80046fc:	200002e4 	.word	0x200002e4
 8004700:	200002cc 	.word	0x200002cc

08004704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fe0d 	bl	8005330 <vPortFree>
            vPortFree( pxTCB );
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fe0a 	bl	8005330 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvResetNextTaskUnblockTime+0x30>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <prvResetNextTaskUnblockTime+0x34>)
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800473a:	e005      	b.n	8004748 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <prvResetNextTaskUnblockTime+0x30>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <prvResetNextTaskUnblockTime+0x34>)
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000029c 	.word	0x2000029c
 8004758:	20000304 	.word	0x20000304

0800475c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <xTaskGetSchedulerState+0x34>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800476a:	2301      	movs	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	e008      	b.n	8004782 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b08      	ldr	r3, [pc, #32]	; (8004794 <xTaskGetSchedulerState+0x38>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004778:	2302      	movs	r3, #2
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	e001      	b.n	8004782 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004782:	687b      	ldr	r3, [r7, #4]
    }
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	200002f0 	.word	0x200002f0
 8004794:	2000030c 	.word	0x2000030c

08004798 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <prvAddCurrentTaskToDelayedList+0xe4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a8:	4b35      	ldr	r3, [pc, #212]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fdf6 	bl	80033a0 <uxListRemove>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2201      	movs	r2, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <prvAddCurrentTaskToDelayedList+0xec>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4013      	ands	r3, r2
 80047ce:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <prvAddCurrentTaskToDelayedList+0xec>)
 80047d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d124      	bne.n	8004824 <prvAddCurrentTaskToDelayedList+0x8c>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d021      	beq.n	8004824 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <prvAddCurrentTaskToDelayedList+0xf0>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	4b24      	ldr	r3, [pc, #144]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	3204      	adds	r2, #4
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004814:	615a      	str	r2, [r3, #20]
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <prvAddCurrentTaskToDelayedList+0xf0>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004822:	e026      	b.n	8004872 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d209      	bcs.n	8004850 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <prvAddCurrentTaskToDelayedList+0xf4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fe fd70 	bl	800332e <vListInsert>
}
 800484e:	e010      	b.n	8004872 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe fd66 	bl	800332e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d202      	bcs.n	8004872 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800486c:	4a09      	ldr	r2, [pc, #36]	; (8004894 <prvAddCurrentTaskToDelayedList+0xfc>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6013      	str	r3, [r2, #0]
}
 8004872:	bf00      	nop
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200002e8 	.word	0x200002e8
 8004880:	2000020c 	.word	0x2000020c
 8004884:	200002ec 	.word	0x200002ec
 8004888:	200002d0 	.word	0x200002d0
 800488c:	200002a0 	.word	0x200002a0
 8004890:	2000029c 	.word	0x2000029c
 8004894:	20000304 	.word	0x20000304

08004898 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80048a2:	f000 fa47 	bl	8004d34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <xTimerCreateTimerTask+0x54>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <xTimerCreateTimerTask+0x58>)
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	2302      	movs	r3, #2
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	2300      	movs	r3, #0
 80048b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048bc:	490d      	ldr	r1, [pc, #52]	; (80048f4 <xTimerCreateTimerTask+0x5c>)
 80048be:	480e      	ldr	r0, [pc, #56]	; (80048f8 <xTimerCreateTimerTask+0x60>)
 80048c0:	f7ff f88a 	bl	80039d8 <xTaskCreate>
 80048c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	603b      	str	r3, [r7, #0]
    }
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80048e2:	687b      	ldr	r3, [r7, #4]
    }
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000340 	.word	0x20000340
 80048f0:	20000344 	.word	0x20000344
 80048f4:	08005f10 	.word	0x08005f10
 80048f8:	080049a1 	.word	0x080049a1

080048fc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004908:	e008      	b.n	800491c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	18d1      	adds	r1, r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f8dd 	bl	8004ae8 <prvInsertTimerInActiveList>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ea      	bne.n	800490a <prvReloadTimer+0xe>
        }
    }
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <prvProcessExpiredTimer+0x5c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3304      	adds	r3, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fd21 	bl	80033a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ffc3 	bl	80048fc <prvReloadTimer>
 8004976:	e008      	b.n	800498a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	4798      	blx	r3
    }
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000338 	.word	0x20000338

080049a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f857 	bl	8004a60 <prvGetNextExpireTime>
 80049b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f803 	bl	80049c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80049be:	f000 f8d5 	bl	8004b6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049c2:	e7f1      	b.n	80049a8 <prvTimerTask+0x8>

080049c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80049ce:	f7ff f9bf 	bl	8003d50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f866 	bl	8004aa8 <prvSampleTimeNow>
 80049dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d130      	bne.n	8004a46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <prvProcessTimerOrBlockTask+0x3c>
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d806      	bhi.n	8004a00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80049f2:	f7ff f9bb 	bl	8003d6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ffa1 	bl	8004940 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80049fe:	e024      	b.n	8004a4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <prvProcessTimerOrBlockTask+0x90>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <prvProcessTimerOrBlockTask+0x50>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <prvProcessTimerOrBlockTask+0x52>
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <prvProcessTimerOrBlockTask+0x94>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f7fe ffa3 	bl	8003970 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a2a:	f7ff f99f 	bl	8003d6c <xTaskResumeAll>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <prvProcessTimerOrBlockTask+0x98>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
    }
 8004a44:	e001      	b.n	8004a4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004a46:	f7ff f991 	bl	8003d6c <xTaskResumeAll>
    }
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000033c 	.word	0x2000033c
 8004a58:	20000340 	.word	0x20000340
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <prvGetNextExpireTime+0x44>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <prvGetNextExpireTime+0x16>
 8004a72:	2201      	movs	r2, #1
 8004a74:	e000      	b.n	8004a78 <prvGetNextExpireTime+0x18>
 8004a76:	2200      	movs	r2, #0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <prvGetNextExpireTime+0x44>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e001      	b.n	8004a94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a94:	68fb      	ldr	r3, [r7, #12]
    }
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000338 	.word	0x20000338

08004aa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004ab0:	f7ff fa58 	bl	8003f64 <xTaskGetTickCount>
 8004ab4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <prvSampleTimeNow+0x3c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d205      	bcs.n	8004acc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004ac0:	f000 f912 	bl	8004ce8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e002      	b.n	8004ad2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004ad2:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <prvSampleTimeNow+0x3c>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
    }
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000348 	.word	0x20000348

08004ae8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d812      	bhi.n	8004b34 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e01b      	b.n	8004b5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <prvInsertTimerInActiveList+0x7c>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fe fbfe 	bl	800332e <vListInsert>
 8004b32:	e012      	b.n	8004b5a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d206      	bcs.n	8004b4a <prvInsertTimerInActiveList+0x62>
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e007      	b.n	8004b5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <prvInsertTimerInActiveList+0x80>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fe fbea 	bl	800332e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b5a:	697b      	ldr	r3, [r7, #20]
    }
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	2000033c 	.word	0x2000033c
 8004b68:	20000338 	.word	0x20000338

08004b6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b72:	e0a6      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f2c0 80a3 	blt.w	8004cc2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fc07 	bl	80033a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff87 	bl	8004aa8 <prvSampleTimeNow>
 8004b9a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	f200 808d 	bhi.w	8004cc0 <prvProcessReceivedCommands+0x154>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <prvProcessReceivedCommands+0x40>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd1 	.word	0x08004bd1
 8004bb4:	08004c39 	.word	0x08004c39
 8004bb8:	08004c4d 	.word	0x08004c4d
 8004bbc:	08004c97 	.word	0x08004c97
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004bd1 	.word	0x08004bd1
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c4d 	.word	0x08004c4d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	18d1      	adds	r1, r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	69f8      	ldr	r0, [r7, #28]
 8004bf0:	f7ff ff7a 	bl	8004ae8 <prvInsertTimerInActiveList>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	4413      	add	r3, r2
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4619      	mov	r1, r3
 8004c14:	69f8      	ldr	r0, [r7, #28]
 8004c16:	f7ff fe71 	bl	80048fc <prvReloadTimer>
 8004c1a:	e008      	b.n	8004c2e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	69f8      	ldr	r0, [r7, #28]
 8004c34:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004c36:	e044      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004c4a:	e03a      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	617b      	str	r3, [r7, #20]
    }
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	18d1      	adds	r1, r2, r3
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	69f8      	ldr	r0, [r7, #28]
 8004c90:	f7ff ff2a 	bl	8004ae8 <prvInsertTimerInActiveList>
                        break;
 8004c94:	e015      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004ca4:	69f8      	ldr	r0, [r7, #28]
 8004ca6:	f000 fb43 	bl	8005330 <vPortFree>
 8004caa:	e00a      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004cbe:	e000      	b.n	8004cc2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004cc0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <prvProcessReceivedCommands+0x178>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f107 0108 	add.w	r1, r7, #8
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe fc93 	bl	80035f8 <xQueueReceive>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f af4d 	bne.w	8004b74 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000340 	.word	0x20000340

08004ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cee:	e009      	b.n	8004d04 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <prvSwitchTimerLists+0x44>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8004cfe:	6838      	ldr	r0, [r7, #0]
 8004d00:	f7ff fe1e 	bl	8004940 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <prvSwitchTimerLists+0x44>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <prvSwitchTimerLists+0x44>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <prvSwitchTimerLists+0x48>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <prvSwitchTimerLists+0x44>)
 8004d1a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004d1c:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <prvSwitchTimerLists+0x48>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6013      	str	r3, [r2, #0]
    }
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000338 	.word	0x20000338
 8004d30:	2000033c 	.word	0x2000033c

08004d34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004d38:	f000 f95e 	bl	8004ff8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004d3c:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <prvCheckForValidListAndQueue+0x54>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11d      	bne.n	8004d80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d44:	4811      	ldr	r0, [pc, #68]	; (8004d8c <prvCheckForValidListAndQueue+0x58>)
 8004d46:	f7fe fac5 	bl	80032d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d4a:	4811      	ldr	r0, [pc, #68]	; (8004d90 <prvCheckForValidListAndQueue+0x5c>)
 8004d4c:	f7fe fac2 	bl	80032d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <prvCheckForValidListAndQueue+0x60>)
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <prvCheckForValidListAndQueue+0x58>)
 8004d54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <prvCheckForValidListAndQueue+0x64>)
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <prvCheckForValidListAndQueue+0x5c>)
 8004d5a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	210c      	movs	r1, #12
 8004d60:	200a      	movs	r0, #10
 8004d62:	f7fe fbd7 	bl	8003514 <xQueueGenericCreate>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <prvCheckForValidListAndQueue+0x54>)
 8004d6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <prvCheckForValidListAndQueue+0x54>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <prvCheckForValidListAndQueue+0x54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4908      	ldr	r1, [pc, #32]	; (8004d9c <prvCheckForValidListAndQueue+0x68>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fdaa 	bl	80038d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d80:	f000 f96a 	bl	8005058 <vPortExitCritical>
    }
 8004d84:	bf00      	nop
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000340 	.word	0x20000340
 8004d8c:	20000310 	.word	0x20000310
 8004d90:	20000324 	.word	0x20000324
 8004d94:	20000338 	.word	0x20000338
 8004d98:	2000033c 	.word	0x2000033c
 8004d9c:	08005f18 	.word	0x08005f18

08004da0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b04      	subs	r3, #4
 8004db0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004db8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3b04      	subs	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3b04      	subs	r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004dd0:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <pxPortInitialiseStack+0x64>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b14      	subs	r3, #20
 8004dda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f06f 0202 	mvn.w	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3b20      	subs	r3, #32
 8004df4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	08004e09 	.word	0x08004e09

08004e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <prvTaskExitError+0x54>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d00a      	beq.n	8004e32 <prvTaskExitError+0x2a>
        __asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60fb      	str	r3, [r7, #12]
    }
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <prvTaskExitError+0x28>
        __asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60bb      	str	r3, [r7, #8]
    }
 8004e44:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004e46:	bf00      	nop
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0fc      	beq.n	8004e48 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000010 	.word	0x20000010

08004e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <pxCurrentTCBConst2>)
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	6808      	ldr	r0, [r1, #0]
 8004e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	f380 8809 	msr	PSP, r0
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8811 	msr	BASEPRI, r0
 8004e7a:	4770      	bx	lr
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst2>:
 8004e80:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004e88:	4808      	ldr	r0, [pc, #32]	; (8004eac <prvPortStartFirstTask+0x24>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	f380 8808 	msr	MSP, r0
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8814 	msr	CONTROL, r0
 8004e9a:	b662      	cpsie	i
 8004e9c:	b661      	cpsie	f
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	df00      	svc	0
 8004ea8:	bf00      	nop
 8004eaa:	0000      	.short	0x0000
 8004eac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop

08004eb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004eba:	4b46      	ldr	r3, [pc, #280]	; (8004fd4 <xPortStartScheduler+0x120>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a46      	ldr	r2, [pc, #280]	; (8004fd8 <xPortStartScheduler+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d10a      	bne.n	8004eda <xPortStartScheduler+0x26>
        __asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	613b      	str	r3, [r7, #16]
    }
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <xPortStartScheduler+0x120>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3f      	ldr	r2, [pc, #252]	; (8004fdc <xPortStartScheduler+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10a      	bne.n	8004efa <xPortStartScheduler+0x46>
        __asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
    }
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004efa:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <xPortStartScheduler+0x12c>)
 8004efc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <xPortStartScheduler+0x130>)
 8004f20:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f22:	4b31      	ldr	r3, [pc, #196]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f24:	2207      	movs	r2, #7
 8004f26:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f28:	e009      	b.n	8004f3e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4a2d      	ldr	r2, [pc, #180]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f32:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d0ef      	beq.n	8004f2a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f4a:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f1c3 0307 	rsb	r3, r3, #7
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d00a      	beq.n	8004f6c <xPortStartScheduler+0xb8>
        __asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60bb      	str	r3, [r7, #8]
    }
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f74:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	; (8004fe8 <xPortStartScheduler+0x134>)
 8004f80:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <xPortStartScheduler+0x138>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <xPortStartScheduler+0x138>)
 8004f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <xPortStartScheduler+0x138>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a14      	ldr	r2, [pc, #80]	; (8004fec <xPortStartScheduler+0x138>)
 8004f9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fa0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004fa2:	f000 f8db 	bl	800515c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <xPortStartScheduler+0x13c>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004fac:	f000 f8fa 	bl	80051a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <xPortStartScheduler+0x140>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <xPortStartScheduler+0x140>)
 8004fb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004fbc:	f7ff ff64 	bl	8004e88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004fc0:	f7ff f8f6 	bl	80041b0 <vTaskSwitchContext>
    prvTaskExitError();
 8004fc4:	f7ff ff20 	bl	8004e08 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	e000ed00 	.word	0xe000ed00
 8004fd8:	410fc271 	.word	0x410fc271
 8004fdc:	410fc270 	.word	0x410fc270
 8004fe0:	e000e400 	.word	0xe000e400
 8004fe4:	2000034c 	.word	0x2000034c
 8004fe8:	20000350 	.word	0x20000350
 8004fec:	e000ed20 	.word	0xe000ed20
 8004ff0:	20000010 	.word	0x20000010
 8004ff4:	e000ef34 	.word	0xe000ef34

08004ff8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
    }
 8005010:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <vPortEnterCritical+0x58>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <vPortEnterCritical+0x58>)
 800501a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <vPortEnterCritical+0x58>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10f      	bne.n	8005044 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <vPortEnterCritical+0x5c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <vPortEnterCritical+0x4c>
        __asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	603b      	str	r3, [r7, #0]
    }
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <vPortEnterCritical+0x4a>
    }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000010 	.word	0x20000010
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <vPortExitCritical+0x50>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <vPortExitCritical+0x24>
        __asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	607b      	str	r3, [r7, #4]
    }
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortExitCritical+0x50>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3b01      	subs	r3, #1
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <vPortExitCritical+0x50>)
 8005084:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <vPortExitCritical+0x50>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <vPortExitCritical+0x42>
 800508e:	2300      	movs	r3, #0
 8005090:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005098:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000010 	.word	0x20000010
 80050ac:	00000000 	.word	0x00000000

080050b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80050b0:	f3ef 8009 	mrs	r0, PSP
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <pxCurrentTCBConst>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	f01e 0f10 	tst.w	lr, #16
 80050c0:	bf08      	it	eq
 80050c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	6010      	str	r0, [r2, #0]
 80050cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050d4:	f380 8811 	msr	BASEPRI, r0
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f7ff f866 	bl	80041b0 <vTaskSwitchContext>
 80050e4:	f04f 0000 	mov.w	r0, #0
 80050e8:	f380 8811 	msr	BASEPRI, r0
 80050ec:	bc09      	pop	{r0, r3}
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	6808      	ldr	r0, [r1, #0]
 80050f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f6:	f01e 0f10 	tst.w	lr, #16
 80050fa:	bf08      	it	eq
 80050fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005100:	f380 8809 	msr	PSP, r0
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	f3af 8000 	nop.w

08005110 <pxCurrentTCBConst>:
 8005110:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
        __asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
    }
 8005130:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005132:	f7fe ff27 	bl	8003f84 <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <SysTick_Handler+0x40>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f383 8811 	msr	BASEPRI, r3
    }
 800514e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <vPortSetupTimerInterrupt+0x34>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <vPortSetupTimerInterrupt+0x38>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <vPortSetupTimerInterrupt+0x3c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a0a      	ldr	r2, [pc, #40]	; (800519c <vPortSetupTimerInterrupt+0x40>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <vPortSetupTimerInterrupt+0x44>)
 800517a:	3b01      	subs	r3, #1
 800517c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <vPortSetupTimerInterrupt+0x34>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e010 	.word	0xe000e010
 8005194:	e000e018 	.word	0xe000e018
 8005198:	20000000 	.word	0x20000000
 800519c:	10624dd3 	.word	0x10624dd3
 80051a0:	e000e014 	.word	0xe000e014

080051a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80051a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051b4 <vPortEnableVFP+0x10>
 80051a8:	6801      	ldr	r1, [r0, #0]
 80051aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ae:	6001      	str	r1, [r0, #0]
 80051b0:	4770      	bx	lr
 80051b2:	0000      	.short	0x0000
 80051b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop

080051bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80051c8:	f7fe fdc2 	bl	8003d50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80051cc:	4b53      	ldr	r3, [pc, #332]	; (800531c <pvPortMalloc+0x160>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80051d4:	f000 f908 	bl	80053e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80051de:	2208      	movs	r2, #8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	3308      	adds	r3, #8
 80051ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d804      	bhi.n	8005200 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e001      	b.n	8005204 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	db70      	blt.n	80052ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d06d      	beq.n	80052ec <pvPortMalloc+0x130>
 8005210:	4b43      	ldr	r3, [pc, #268]	; (8005320 <pvPortMalloc+0x164>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d868      	bhi.n	80052ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800521a:	4b42      	ldr	r3, [pc, #264]	; (8005324 <pvPortMalloc+0x168>)
 800521c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800521e:	4b41      	ldr	r3, [pc, #260]	; (8005324 <pvPortMalloc+0x168>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005224:	e004      	b.n	8005230 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <pvPortMalloc+0x86>
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f1      	bne.n	8005226 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <pvPortMalloc+0x160>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	d04f      	beq.n	80052ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2208      	movs	r2, #8
 8005252:	4413      	add	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1ad2      	subs	r2, r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	429a      	cmp	r2, r3
 800526c:	d91f      	bls.n	80052ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <pvPortMalloc+0xda>
        __asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
    }
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f000 f8f9 	bl	80054a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052ae:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <pvPortMalloc+0x164>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <pvPortMalloc+0x164>)
 80052ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <pvPortMalloc+0x164>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b19      	ldr	r3, [pc, #100]	; (8005328 <pvPortMalloc+0x16c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d203      	bcs.n	80052d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <pvPortMalloc+0x164>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a16      	ldr	r2, [pc, #88]	; (8005328 <pvPortMalloc+0x16c>)
 80052ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <pvPortMalloc+0x170>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a10      	ldr	r2, [pc, #64]	; (800532c <pvPortMalloc+0x170>)
 80052ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80052ec:	f7fe fd3e 	bl	8003d6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <pvPortMalloc+0x154>
        __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
    }
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <pvPortMalloc+0x152>
    return pvReturn;
 8005310:	69fb      	ldr	r3, [r7, #28]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20012f5c 	.word	0x20012f5c
 8005320:	20012f60 	.word	0x20012f60
 8005324:	20012f54 	.word	0x20012f54
 8005328:	20012f64 	.word	0x20012f64
 800532c:	20012f68 	.word	0x20012f68

08005330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d049      	beq.n	80053d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005342:	2308      	movs	r3, #8
 8005344:	425b      	negs	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	db0a      	blt.n	800536e <vPortFree+0x3e>
        __asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
    }
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <vPortFree+0x5c>
        __asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
    }
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0fdb      	lsrs	r3, r3, #31
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01c      	beq.n	80053d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d118      	bne.n	80053d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80053b0:	f7fe fcce 	bl	8003d50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <vPortFree+0xb0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <vPortFree+0xb0>)
 80053c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053c2:	6938      	ldr	r0, [r7, #16]
 80053c4:	f000 f86c 	bl	80054a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <vPortFree+0xb4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a05      	ldr	r2, [pc, #20]	; (80053e4 <vPortFree+0xb4>)
 80053d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80053d2:	f7fe fccb 	bl	8003d6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20012f60 	.word	0x20012f60
 80053e4:	20012f6c 	.word	0x20012f6c

080053e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80053f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80053f4:	4b25      	ldr	r3, [pc, #148]	; (800548c <prvHeapInit+0xa4>)
 80053f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3307      	adds	r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <prvHeapInit+0xa4>)
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <prvHeapInit+0xa8>)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <prvHeapInit+0xa8>)
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4413      	add	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005434:	2208      	movs	r2, #8
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a13      	ldr	r2, [pc, #76]	; (8005494 <prvHeapInit+0xac>)
 8005448:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <prvHeapInit+0xac>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <prvHeapInit+0xac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	1ad2      	subs	r2, r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvHeapInit+0xac>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a08      	ldr	r2, [pc, #32]	; (8005498 <prvHeapInit+0xb0>)
 8005476:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a07      	ldr	r2, [pc, #28]	; (800549c <prvHeapInit+0xb4>)
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000354 	.word	0x20000354
 8005490:	20012f54 	.word	0x20012f54
 8005494:	20012f5c 	.word	0x20012f5c
 8005498:	20012f64 	.word	0x20012f64
 800549c:	20012f60 	.word	0x20012f60

080054a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <prvInsertBlockIntoFreeList+0xac>)
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e002      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x14>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d8f7      	bhi.n	80054ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4413      	add	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d108      	bne.n	80054e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	441a      	add	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	441a      	add	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d118      	bne.n	8005528 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <prvInsertBlockIntoFreeList+0xb0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d00d      	beq.n	800551e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	441a      	add	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e008      	b.n	8005530 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <prvInsertBlockIntoFreeList+0xb0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e003      	b.n	8005530 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d002      	beq.n	800553e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20012f54 	.word	0x20012f54
 8005550:	20012f5c 	.word	0x20012f5c

08005554 <std>:
 8005554:	2300      	movs	r3, #0
 8005556:	b510      	push	{r4, lr}
 8005558:	4604      	mov	r4, r0
 800555a:	e9c0 3300 	strd	r3, r3, [r0]
 800555e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005562:	6083      	str	r3, [r0, #8]
 8005564:	8181      	strh	r1, [r0, #12]
 8005566:	6643      	str	r3, [r0, #100]	; 0x64
 8005568:	81c2      	strh	r2, [r0, #14]
 800556a:	6183      	str	r3, [r0, #24]
 800556c:	4619      	mov	r1, r3
 800556e:	2208      	movs	r2, #8
 8005570:	305c      	adds	r0, #92	; 0x5c
 8005572:	f000 f9d3 	bl	800591c <memset>
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <std+0x38>)
 8005578:	6263      	str	r3, [r4, #36]	; 0x24
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <std+0x3c>)
 800557c:	62a3      	str	r3, [r4, #40]	; 0x28
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <std+0x40>)
 8005580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <std+0x44>)
 8005584:	6224      	str	r4, [r4, #32]
 8005586:	6323      	str	r3, [r4, #48]	; 0x30
 8005588:	bd10      	pop	{r4, pc}
 800558a:	bf00      	nop
 800558c:	0800576d 	.word	0x0800576d
 8005590:	0800578f 	.word	0x0800578f
 8005594:	080057c7 	.word	0x080057c7
 8005598:	080057eb 	.word	0x080057eb

0800559c <stdio_exit_handler>:
 800559c:	4a02      	ldr	r2, [pc, #8]	; (80055a8 <stdio_exit_handler+0xc>)
 800559e:	4903      	ldr	r1, [pc, #12]	; (80055ac <stdio_exit_handler+0x10>)
 80055a0:	4803      	ldr	r0, [pc, #12]	; (80055b0 <stdio_exit_handler+0x14>)
 80055a2:	f000 b869 	b.w	8005678 <_fwalk_sglue>
 80055a6:	bf00      	nop
 80055a8:	20000014 	.word	0x20000014
 80055ac:	08005d1d 	.word	0x08005d1d
 80055b0:	20000020 	.word	0x20000020

080055b4 <cleanup_stdio>:
 80055b4:	6841      	ldr	r1, [r0, #4]
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <cleanup_stdio+0x34>)
 80055b8:	4299      	cmp	r1, r3
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4604      	mov	r4, r0
 80055be:	d001      	beq.n	80055c4 <cleanup_stdio+0x10>
 80055c0:	f000 fbac 	bl	8005d1c <_fflush_r>
 80055c4:	68a1      	ldr	r1, [r4, #8]
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <cleanup_stdio+0x38>)
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d002      	beq.n	80055d2 <cleanup_stdio+0x1e>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fba5 	bl	8005d1c <_fflush_r>
 80055d2:	68e1      	ldr	r1, [r4, #12]
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <cleanup_stdio+0x3c>)
 80055d6:	4299      	cmp	r1, r3
 80055d8:	d004      	beq.n	80055e4 <cleanup_stdio+0x30>
 80055da:	4620      	mov	r0, r4
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f000 bb9c 	b.w	8005d1c <_fflush_r>
 80055e4:	bd10      	pop	{r4, pc}
 80055e6:	bf00      	nop
 80055e8:	20012f70 	.word	0x20012f70
 80055ec:	20012fd8 	.word	0x20012fd8
 80055f0:	20013040 	.word	0x20013040

080055f4 <global_stdio_init.part.0>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <global_stdio_init.part.0+0x30>)
 80055f8:	4c0b      	ldr	r4, [pc, #44]	; (8005628 <global_stdio_init.part.0+0x34>)
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <global_stdio_init.part.0+0x38>)
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	4620      	mov	r0, r4
 8005600:	2200      	movs	r2, #0
 8005602:	2104      	movs	r1, #4
 8005604:	f7ff ffa6 	bl	8005554 <std>
 8005608:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800560c:	2201      	movs	r2, #1
 800560e:	2109      	movs	r1, #9
 8005610:	f7ff ffa0 	bl	8005554 <std>
 8005614:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005618:	2202      	movs	r2, #2
 800561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561e:	2112      	movs	r1, #18
 8005620:	f7ff bf98 	b.w	8005554 <std>
 8005624:	200130a8 	.word	0x200130a8
 8005628:	20012f70 	.word	0x20012f70
 800562c:	0800559d 	.word	0x0800559d

08005630 <__sfp_lock_acquire>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__sfp_lock_acquire+0x8>)
 8005632:	f000 b9e5 	b.w	8005a00 <__retarget_lock_acquire_recursive>
 8005636:	bf00      	nop
 8005638:	200130b1 	.word	0x200130b1

0800563c <__sfp_lock_release>:
 800563c:	4801      	ldr	r0, [pc, #4]	; (8005644 <__sfp_lock_release+0x8>)
 800563e:	f000 b9e0 	b.w	8005a02 <__retarget_lock_release_recursive>
 8005642:	bf00      	nop
 8005644:	200130b1 	.word	0x200130b1

08005648 <__sinit>:
 8005648:	b510      	push	{r4, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	f7ff fff0 	bl	8005630 <__sfp_lock_acquire>
 8005650:	6a23      	ldr	r3, [r4, #32]
 8005652:	b11b      	cbz	r3, 800565c <__sinit+0x14>
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f7ff bff0 	b.w	800563c <__sfp_lock_release>
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <__sinit+0x28>)
 800565e:	6223      	str	r3, [r4, #32]
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <__sinit+0x2c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f5      	bne.n	8005654 <__sinit+0xc>
 8005668:	f7ff ffc4 	bl	80055f4 <global_stdio_init.part.0>
 800566c:	e7f2      	b.n	8005654 <__sinit+0xc>
 800566e:	bf00      	nop
 8005670:	080055b5 	.word	0x080055b5
 8005674:	200130a8 	.word	0x200130a8

08005678 <_fwalk_sglue>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4607      	mov	r7, r0
 800567e:	4688      	mov	r8, r1
 8005680:	4614      	mov	r4, r2
 8005682:	2600      	movs	r6, #0
 8005684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005688:	f1b9 0901 	subs.w	r9, r9, #1
 800568c:	d505      	bpl.n	800569a <_fwalk_sglue+0x22>
 800568e:	6824      	ldr	r4, [r4, #0]
 8005690:	2c00      	cmp	r4, #0
 8005692:	d1f7      	bne.n	8005684 <_fwalk_sglue+0xc>
 8005694:	4630      	mov	r0, r6
 8005696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d907      	bls.n	80056b0 <_fwalk_sglue+0x38>
 80056a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056a4:	3301      	adds	r3, #1
 80056a6:	d003      	beq.n	80056b0 <_fwalk_sglue+0x38>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	4306      	orrs	r6, r0
 80056b0:	3568      	adds	r5, #104	; 0x68
 80056b2:	e7e9      	b.n	8005688 <_fwalk_sglue+0x10>

080056b4 <_puts_r>:
 80056b4:	6a03      	ldr	r3, [r0, #32]
 80056b6:	b570      	push	{r4, r5, r6, lr}
 80056b8:	6884      	ldr	r4, [r0, #8]
 80056ba:	4605      	mov	r5, r0
 80056bc:	460e      	mov	r6, r1
 80056be:	b90b      	cbnz	r3, 80056c4 <_puts_r+0x10>
 80056c0:	f7ff ffc2 	bl	8005648 <__sinit>
 80056c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c6:	07db      	lsls	r3, r3, #31
 80056c8:	d405      	bmi.n	80056d6 <_puts_r+0x22>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	0598      	lsls	r0, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_puts_r+0x22>
 80056d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d2:	f000 f995 	bl	8005a00 <__retarget_lock_acquire_recursive>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	0719      	lsls	r1, r3, #28
 80056da:	d513      	bpl.n	8005704 <_puts_r+0x50>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	b18b      	cbz	r3, 8005704 <_puts_r+0x50>
 80056e0:	3e01      	subs	r6, #1
 80056e2:	68a3      	ldr	r3, [r4, #8]
 80056e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	b9e9      	cbnz	r1, 800572a <_puts_r+0x76>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da2e      	bge.n	8005750 <_puts_r+0x9c>
 80056f2:	4622      	mov	r2, r4
 80056f4:	210a      	movs	r1, #10
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f87b 	bl	80057f2 <__swbuf_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d007      	beq.n	8005710 <_puts_r+0x5c>
 8005700:	250a      	movs	r5, #10
 8005702:	e007      	b.n	8005714 <_puts_r+0x60>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f8b0 	bl	800586c <__swsetup_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0e7      	beq.n	80056e0 <_puts_r+0x2c>
 8005710:	f04f 35ff 	mov.w	r5, #4294967295
 8005714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005716:	07da      	lsls	r2, r3, #31
 8005718:	d405      	bmi.n	8005726 <_puts_r+0x72>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	059b      	lsls	r3, r3, #22
 800571e:	d402      	bmi.n	8005726 <_puts_r+0x72>
 8005720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005722:	f000 f96e 	bl	8005a02 <__retarget_lock_release_recursive>
 8005726:	4628      	mov	r0, r5
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	2b00      	cmp	r3, #0
 800572c:	da04      	bge.n	8005738 <_puts_r+0x84>
 800572e:	69a2      	ldr	r2, [r4, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	dc06      	bgt.n	8005742 <_puts_r+0x8e>
 8005734:	290a      	cmp	r1, #10
 8005736:	d004      	beq.n	8005742 <_puts_r+0x8e>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	7019      	strb	r1, [r3, #0]
 8005740:	e7cf      	b.n	80056e2 <_puts_r+0x2e>
 8005742:	4622      	mov	r2, r4
 8005744:	4628      	mov	r0, r5
 8005746:	f000 f854 	bl	80057f2 <__swbuf_r>
 800574a:	3001      	adds	r0, #1
 800574c:	d1c9      	bne.n	80056e2 <_puts_r+0x2e>
 800574e:	e7df      	b.n	8005710 <_puts_r+0x5c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	250a      	movs	r5, #10
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	701d      	strb	r5, [r3, #0]
 800575a:	e7db      	b.n	8005714 <_puts_r+0x60>

0800575c <puts>:
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <puts+0xc>)
 800575e:	4601      	mov	r1, r0
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f7ff bfa7 	b.w	80056b4 <_puts_r>
 8005766:	bf00      	nop
 8005768:	2000006c 	.word	0x2000006c

0800576c <__sread>:
 800576c:	b510      	push	{r4, lr}
 800576e:	460c      	mov	r4, r1
 8005770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005774:	f000 f8fc 	bl	8005970 <_read_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	bfab      	itete	ge
 800577c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800577e:	89a3      	ldrhlt	r3, [r4, #12]
 8005780:	181b      	addge	r3, r3, r0
 8005782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005786:	bfac      	ite	ge
 8005788:	6563      	strge	r3, [r4, #84]	; 0x54
 800578a:	81a3      	strhlt	r3, [r4, #12]
 800578c:	bd10      	pop	{r4, pc}

0800578e <__swrite>:
 800578e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005792:	461f      	mov	r7, r3
 8005794:	898b      	ldrh	r3, [r1, #12]
 8005796:	05db      	lsls	r3, r3, #23
 8005798:	4605      	mov	r5, r0
 800579a:	460c      	mov	r4, r1
 800579c:	4616      	mov	r6, r2
 800579e:	d505      	bpl.n	80057ac <__swrite+0x1e>
 80057a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a4:	2302      	movs	r3, #2
 80057a6:	2200      	movs	r2, #0
 80057a8:	f000 f8d0 	bl	800594c <_lseek_r>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	4632      	mov	r2, r6
 80057ba:	463b      	mov	r3, r7
 80057bc:	4628      	mov	r0, r5
 80057be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c2:	f000 b8e7 	b.w	8005994 <_write_r>

080057c6 <__sseek>:
 80057c6:	b510      	push	{r4, lr}
 80057c8:	460c      	mov	r4, r1
 80057ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ce:	f000 f8bd 	bl	800594c <_lseek_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	bf15      	itete	ne
 80057d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80057da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057e2:	81a3      	strheq	r3, [r4, #12]
 80057e4:	bf18      	it	ne
 80057e6:	81a3      	strhne	r3, [r4, #12]
 80057e8:	bd10      	pop	{r4, pc}

080057ea <__sclose>:
 80057ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ee:	f000 b89d 	b.w	800592c <_close_r>

080057f2 <__swbuf_r>:
 80057f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f4:	460e      	mov	r6, r1
 80057f6:	4614      	mov	r4, r2
 80057f8:	4605      	mov	r5, r0
 80057fa:	b118      	cbz	r0, 8005804 <__swbuf_r+0x12>
 80057fc:	6a03      	ldr	r3, [r0, #32]
 80057fe:	b90b      	cbnz	r3, 8005804 <__swbuf_r+0x12>
 8005800:	f7ff ff22 	bl	8005648 <__sinit>
 8005804:	69a3      	ldr	r3, [r4, #24]
 8005806:	60a3      	str	r3, [r4, #8]
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	071a      	lsls	r2, r3, #28
 800580c:	d525      	bpl.n	800585a <__swbuf_r+0x68>
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	b31b      	cbz	r3, 800585a <__swbuf_r+0x68>
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	6922      	ldr	r2, [r4, #16]
 8005816:	1a98      	subs	r0, r3, r2
 8005818:	6963      	ldr	r3, [r4, #20]
 800581a:	b2f6      	uxtb	r6, r6
 800581c:	4283      	cmp	r3, r0
 800581e:	4637      	mov	r7, r6
 8005820:	dc04      	bgt.n	800582c <__swbuf_r+0x3a>
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 fa79 	bl	8005d1c <_fflush_r>
 800582a:	b9e0      	cbnz	r0, 8005866 <__swbuf_r+0x74>
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	3b01      	subs	r3, #1
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	701e      	strb	r6, [r3, #0]
 800583a:	6962      	ldr	r2, [r4, #20]
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	d004      	beq.n	800584c <__swbuf_r+0x5a>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	07db      	lsls	r3, r3, #31
 8005846:	d506      	bpl.n	8005856 <__swbuf_r+0x64>
 8005848:	2e0a      	cmp	r6, #10
 800584a:	d104      	bne.n	8005856 <__swbuf_r+0x64>
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 fa64 	bl	8005d1c <_fflush_r>
 8005854:	b938      	cbnz	r0, 8005866 <__swbuf_r+0x74>
 8005856:	4638      	mov	r0, r7
 8005858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f805 	bl	800586c <__swsetup_r>
 8005862:	2800      	cmp	r0, #0
 8005864:	d0d5      	beq.n	8005812 <__swbuf_r+0x20>
 8005866:	f04f 37ff 	mov.w	r7, #4294967295
 800586a:	e7f4      	b.n	8005856 <__swbuf_r+0x64>

0800586c <__swsetup_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <__swsetup_r+0xac>)
 8005870:	4605      	mov	r5, r0
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	460c      	mov	r4, r1
 8005876:	b118      	cbz	r0, 8005880 <__swsetup_r+0x14>
 8005878:	6a03      	ldr	r3, [r0, #32]
 800587a:	b90b      	cbnz	r3, 8005880 <__swsetup_r+0x14>
 800587c:	f7ff fee4 	bl	8005648 <__sinit>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005886:	0718      	lsls	r0, r3, #28
 8005888:	d422      	bmi.n	80058d0 <__swsetup_r+0x64>
 800588a:	06d9      	lsls	r1, r3, #27
 800588c:	d407      	bmi.n	800589e <__swsetup_r+0x32>
 800588e:	2309      	movs	r3, #9
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e034      	b.n	8005908 <__swsetup_r+0x9c>
 800589e:	0758      	lsls	r0, r3, #29
 80058a0:	d512      	bpl.n	80058c8 <__swsetup_r+0x5c>
 80058a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a4:	b141      	cbz	r1, 80058b8 <__swsetup_r+0x4c>
 80058a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058aa:	4299      	cmp	r1, r3
 80058ac:	d002      	beq.n	80058b4 <__swsetup_r+0x48>
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f8b6 	bl	8005a20 <_free_r>
 80058b4:	2300      	movs	r3, #0
 80058b6:	6363      	str	r3, [r4, #52]	; 0x34
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	2300      	movs	r3, #0
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f043 0308 	orr.w	r3, r3, #8
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b94b      	cbnz	r3, 80058e8 <__swsetup_r+0x7c>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d003      	beq.n	80058e8 <__swsetup_r+0x7c>
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 fa68 	bl	8005db8 <__smakebuf_r>
 80058e8:	89a0      	ldrh	r0, [r4, #12]
 80058ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ee:	f010 0301 	ands.w	r3, r0, #1
 80058f2:	d00a      	beq.n	800590a <__swsetup_r+0x9e>
 80058f4:	2300      	movs	r3, #0
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	6963      	ldr	r3, [r4, #20]
 80058fa:	425b      	negs	r3, r3
 80058fc:	61a3      	str	r3, [r4, #24]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	b943      	cbnz	r3, 8005914 <__swsetup_r+0xa8>
 8005902:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005906:	d1c4      	bne.n	8005892 <__swsetup_r+0x26>
 8005908:	bd38      	pop	{r3, r4, r5, pc}
 800590a:	0781      	lsls	r1, r0, #30
 800590c:	bf58      	it	pl
 800590e:	6963      	ldrpl	r3, [r4, #20]
 8005910:	60a3      	str	r3, [r4, #8]
 8005912:	e7f4      	b.n	80058fe <__swsetup_r+0x92>
 8005914:	2000      	movs	r0, #0
 8005916:	e7f7      	b.n	8005908 <__swsetup_r+0x9c>
 8005918:	2000006c 	.word	0x2000006c

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb faa7 	bl	8000e8a <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	200130ac 	.word	0x200130ac

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_lseek_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fabc 	bl	8000ed8 <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200130ac 	.word	0x200130ac

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_read_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fa4a 	bl	8000e18 <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	200130ac 	.word	0x200130ac

08005994 <_write_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d07      	ldr	r5, [pc, #28]	; (80059b4 <_write_r+0x20>)
 8005998:	4604      	mov	r4, r0
 800599a:	4608      	mov	r0, r1
 800599c:	4611      	mov	r1, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	602a      	str	r2, [r5, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fb fa55 	bl	8000e52 <_write>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_write_r+0x1e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_write_r+0x1e>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	200130ac 	.word	0x200130ac

080059b8 <__libc_init_array>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4d0d      	ldr	r5, [pc, #52]	; (80059f0 <__libc_init_array+0x38>)
 80059bc:	4c0d      	ldr	r4, [pc, #52]	; (80059f4 <__libc_init_array+0x3c>)
 80059be:	1b64      	subs	r4, r4, r5
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	2600      	movs	r6, #0
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	d109      	bne.n	80059dc <__libc_init_array+0x24>
 80059c8:	4d0b      	ldr	r5, [pc, #44]	; (80059f8 <__libc_init_array+0x40>)
 80059ca:	4c0c      	ldr	r4, [pc, #48]	; (80059fc <__libc_init_array+0x44>)
 80059cc:	f000 fa70 	bl	8005eb0 <_init>
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	2600      	movs	r6, #0
 80059d6:	42a6      	cmp	r6, r4
 80059d8:	d105      	bne.n	80059e6 <__libc_init_array+0x2e>
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e0:	4798      	blx	r3
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7ee      	b.n	80059c4 <__libc_init_array+0xc>
 80059e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ea:	4798      	blx	r3
 80059ec:	3601      	adds	r6, #1
 80059ee:	e7f2      	b.n	80059d6 <__libc_init_array+0x1e>
 80059f0:	08005f40 	.word	0x08005f40
 80059f4:	08005f40 	.word	0x08005f40
 80059f8:	08005f40 	.word	0x08005f40
 80059fc:	08005f44 	.word	0x08005f44

08005a00 <__retarget_lock_acquire_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <__retarget_lock_release_recursive>:
 8005a02:	4770      	bx	lr

08005a04 <memcpy>:
 8005a04:	440a      	add	r2, r1
 8005a06:	4291      	cmp	r1, r2
 8005a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a0c:	d100      	bne.n	8005a10 <memcpy+0xc>
 8005a0e:	4770      	bx	lr
 8005a10:	b510      	push	{r4, lr}
 8005a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	d1f9      	bne.n	8005a12 <memcpy+0xe>
 8005a1e:	bd10      	pop	{r4, pc}

08005a20 <_free_r>:
 8005a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d044      	beq.n	8005ab0 <_free_r+0x90>
 8005a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2a:	9001      	str	r0, [sp, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a32:	bfb8      	it	lt
 8005a34:	18e4      	addlt	r4, r4, r3
 8005a36:	f000 f8df 	bl	8005bf8 <__malloc_lock>
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <_free_r+0x94>)
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x30>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f000 b8da 	b.w	8005c04 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x46>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x22>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x50>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x46>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1855      	adds	r5, r2, r1
 8005a74:	42a5      	cmp	r5, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x70>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	4421      	add	r1, r4
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x26>
 8005a84:	681c      	ldr	r4, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	440c      	add	r4, r1
 8005a8c:	6014      	str	r4, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x26>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x26>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1949      	addeq	r1, r1, r5
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x26>
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	200130b4 	.word	0x200130b4

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0e      	ldr	r6, [pc, #56]	; (8005af4 <sbrk_aligned+0x3c>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 f9d6 	bl	8005e74 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 f9d1 	bl	8005e74 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d00a      	beq.n	8005aec <sbrk_aligned+0x34>
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d007      	beq.n	8005af0 <sbrk_aligned+0x38>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f9c6 	bl	8005e74 <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d101      	bne.n	8005af0 <sbrk_aligned+0x38>
 8005aec:	f04f 34ff 	mov.w	r4, #4294967295
 8005af0:	4620      	mov	r0, r4
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	200130b8 	.word	0x200130b8

08005af8 <_malloc_r>:
 8005af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afc:	1ccd      	adds	r5, r1, #3
 8005afe:	f025 0503 	bic.w	r5, r5, #3
 8005b02:	3508      	adds	r5, #8
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	bf38      	it	cc
 8005b08:	250c      	movcc	r5, #12
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	db01      	blt.n	8005b14 <_malloc_r+0x1c>
 8005b10:	42a9      	cmp	r1, r5
 8005b12:	d905      	bls.n	8005b20 <_malloc_r+0x28>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	2600      	movs	r6, #0
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bf4 <_malloc_r+0xfc>
 8005b24:	f000 f868 	bl	8005bf8 <__malloc_lock>
 8005b28:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2c:	461c      	mov	r4, r3
 8005b2e:	bb5c      	cbnz	r4, 8005b88 <_malloc_r+0x90>
 8005b30:	4629      	mov	r1, r5
 8005b32:	4638      	mov	r0, r7
 8005b34:	f7ff ffc0 	bl	8005ab8 <sbrk_aligned>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	d155      	bne.n	8005bea <_malloc_r+0xf2>
 8005b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b42:	4626      	mov	r6, r4
 8005b44:	2e00      	cmp	r6, #0
 8005b46:	d145      	bne.n	8005bd4 <_malloc_r+0xdc>
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	d048      	beq.n	8005bde <_malloc_r+0xe6>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4638      	mov	r0, r7
 8005b52:	eb04 0903 	add.w	r9, r4, r3
 8005b56:	f000 f98d 	bl	8005e74 <_sbrk_r>
 8005b5a:	4581      	cmp	r9, r0
 8005b5c:	d13f      	bne.n	8005bde <_malloc_r+0xe6>
 8005b5e:	6821      	ldr	r1, [r4, #0]
 8005b60:	1a6d      	subs	r5, r5, r1
 8005b62:	4629      	mov	r1, r5
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ffa7 	bl	8005ab8 <sbrk_aligned>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d037      	beq.n	8005bde <_malloc_r+0xe6>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	442b      	add	r3, r5
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	f8d8 3000 	ldr.w	r3, [r8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d038      	beq.n	8005bee <_malloc_r+0xf6>
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	42a2      	cmp	r2, r4
 8005b80:	d12b      	bne.n	8005bda <_malloc_r+0xe2>
 8005b82:	2200      	movs	r2, #0
 8005b84:	605a      	str	r2, [r3, #4]
 8005b86:	e00f      	b.n	8005ba8 <_malloc_r+0xb0>
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	1b52      	subs	r2, r2, r5
 8005b8c:	d41f      	bmi.n	8005bce <_malloc_r+0xd6>
 8005b8e:	2a0b      	cmp	r2, #11
 8005b90:	d917      	bls.n	8005bc2 <_malloc_r+0xca>
 8005b92:	1961      	adds	r1, r4, r5
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	6025      	str	r5, [r4, #0]
 8005b98:	bf18      	it	ne
 8005b9a:	6059      	strne	r1, [r3, #4]
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	bf08      	it	eq
 8005ba0:	f8c8 1000 	streq.w	r1, [r8]
 8005ba4:	5162      	str	r2, [r4, r5]
 8005ba6:	604b      	str	r3, [r1, #4]
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f104 060b 	add.w	r6, r4, #11
 8005bae:	f000 f829 	bl	8005c04 <__malloc_unlock>
 8005bb2:	f026 0607 	bic.w	r6, r6, #7
 8005bb6:	1d23      	adds	r3, r4, #4
 8005bb8:	1af2      	subs	r2, r6, r3
 8005bba:	d0ae      	beq.n	8005b1a <_malloc_r+0x22>
 8005bbc:	1b9b      	subs	r3, r3, r6
 8005bbe:	50a3      	str	r3, [r4, r2]
 8005bc0:	e7ab      	b.n	8005b1a <_malloc_r+0x22>
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	6862      	ldr	r2, [r4, #4]
 8005bc6:	d1dd      	bne.n	8005b84 <_malloc_r+0x8c>
 8005bc8:	f8c8 2000 	str.w	r2, [r8]
 8005bcc:	e7ec      	b.n	8005ba8 <_malloc_r+0xb0>
 8005bce:	4623      	mov	r3, r4
 8005bd0:	6864      	ldr	r4, [r4, #4]
 8005bd2:	e7ac      	b.n	8005b2e <_malloc_r+0x36>
 8005bd4:	4634      	mov	r4, r6
 8005bd6:	6876      	ldr	r6, [r6, #4]
 8005bd8:	e7b4      	b.n	8005b44 <_malloc_r+0x4c>
 8005bda:	4613      	mov	r3, r2
 8005bdc:	e7cc      	b.n	8005b78 <_malloc_r+0x80>
 8005bde:	230c      	movs	r3, #12
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4638      	mov	r0, r7
 8005be4:	f000 f80e 	bl	8005c04 <__malloc_unlock>
 8005be8:	e797      	b.n	8005b1a <_malloc_r+0x22>
 8005bea:	6025      	str	r5, [r4, #0]
 8005bec:	e7dc      	b.n	8005ba8 <_malloc_r+0xb0>
 8005bee:	605b      	str	r3, [r3, #4]
 8005bf0:	deff      	udf	#255	; 0xff
 8005bf2:	bf00      	nop
 8005bf4:	200130b4 	.word	0x200130b4

08005bf8 <__malloc_lock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__malloc_lock+0x8>)
 8005bfa:	f7ff bf01 	b.w	8005a00 <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	200130b0 	.word	0x200130b0

08005c04 <__malloc_unlock>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__malloc_unlock+0x8>)
 8005c06:	f7ff befc 	b.w	8005a02 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	200130b0 	.word	0x200130b0

08005c10 <__sflush_r>:
 8005c10:	898a      	ldrh	r2, [r1, #12]
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	4605      	mov	r5, r0
 8005c18:	0710      	lsls	r0, r2, #28
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	d458      	bmi.n	8005cd0 <__sflush_r+0xc0>
 8005c1e:	684b      	ldr	r3, [r1, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc05      	bgt.n	8005c30 <__sflush_r+0x20>
 8005c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dc02      	bgt.n	8005c30 <__sflush_r+0x20>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c32:	2e00      	cmp	r6, #0
 8005c34:	d0f9      	beq.n	8005c2a <__sflush_r+0x1a>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c3c:	682f      	ldr	r7, [r5, #0]
 8005c3e:	6a21      	ldr	r1, [r4, #32]
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	d032      	beq.n	8005caa <__sflush_r+0x9a>
 8005c44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	075a      	lsls	r2, r3, #29
 8005c4a:	d505      	bpl.n	8005c58 <__sflush_r+0x48>
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	1ac0      	subs	r0, r0, r3
 8005c50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c52:	b10b      	cbz	r3, 8005c58 <__sflush_r+0x48>
 8005c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c56:	1ac0      	subs	r0, r0, r3
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c5e:	6a21      	ldr	r1, [r4, #32]
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b0      	blx	r6
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	d106      	bne.n	8005c78 <__sflush_r+0x68>
 8005c6a:	6829      	ldr	r1, [r5, #0]
 8005c6c:	291d      	cmp	r1, #29
 8005c6e:	d82b      	bhi.n	8005cc8 <__sflush_r+0xb8>
 8005c70:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <__sflush_r+0x108>)
 8005c72:	410a      	asrs	r2, r1
 8005c74:	07d6      	lsls	r6, r2, #31
 8005c76:	d427      	bmi.n	8005cc8 <__sflush_r+0xb8>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	6062      	str	r2, [r4, #4]
 8005c7c:	04d9      	lsls	r1, r3, #19
 8005c7e:	6922      	ldr	r2, [r4, #16]
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	d504      	bpl.n	8005c8e <__sflush_r+0x7e>
 8005c84:	1c42      	adds	r2, r0, #1
 8005c86:	d101      	bne.n	8005c8c <__sflush_r+0x7c>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b903      	cbnz	r3, 8005c8e <__sflush_r+0x7e>
 8005c8c:	6560      	str	r0, [r4, #84]	; 0x54
 8005c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c90:	602f      	str	r7, [r5, #0]
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d0c9      	beq.n	8005c2a <__sflush_r+0x1a>
 8005c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	d002      	beq.n	8005ca4 <__sflush_r+0x94>
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f7ff febe 	bl	8005a20 <_free_r>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	6360      	str	r0, [r4, #52]	; 0x34
 8005ca8:	e7c0      	b.n	8005c2c <__sflush_r+0x1c>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b0      	blx	r6
 8005cb0:	1c41      	adds	r1, r0, #1
 8005cb2:	d1c8      	bne.n	8005c46 <__sflush_r+0x36>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0c5      	beq.n	8005c46 <__sflush_r+0x36>
 8005cba:	2b1d      	cmp	r3, #29
 8005cbc:	d001      	beq.n	8005cc2 <__sflush_r+0xb2>
 8005cbe:	2b16      	cmp	r3, #22
 8005cc0:	d101      	bne.n	8005cc6 <__sflush_r+0xb6>
 8005cc2:	602f      	str	r7, [r5, #0]
 8005cc4:	e7b1      	b.n	8005c2a <__sflush_r+0x1a>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	e7ad      	b.n	8005c2c <__sflush_r+0x1c>
 8005cd0:	690f      	ldr	r7, [r1, #16]
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	d0a9      	beq.n	8005c2a <__sflush_r+0x1a>
 8005cd6:	0793      	lsls	r3, r2, #30
 8005cd8:	680e      	ldr	r6, [r1, #0]
 8005cda:	bf08      	it	eq
 8005cdc:	694b      	ldreq	r3, [r1, #20]
 8005cde:	600f      	str	r7, [r1, #0]
 8005ce0:	bf18      	it	ne
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	eba6 0807 	sub.w	r8, r6, r7
 8005ce8:	608b      	str	r3, [r1, #8]
 8005cea:	f1b8 0f00 	cmp.w	r8, #0
 8005cee:	dd9c      	ble.n	8005c2a <__sflush_r+0x1a>
 8005cf0:	6a21      	ldr	r1, [r4, #32]
 8005cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	463a      	mov	r2, r7
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b0      	blx	r6
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	dc06      	bgt.n	8005d0e <__sflush_r+0xfe>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e78e      	b.n	8005c2c <__sflush_r+0x1c>
 8005d0e:	4407      	add	r7, r0
 8005d10:	eba8 0800 	sub.w	r8, r8, r0
 8005d14:	e7e9      	b.n	8005cea <__sflush_r+0xda>
 8005d16:	bf00      	nop
 8005d18:	dfbffffe 	.word	0xdfbffffe

08005d1c <_fflush_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	4605      	mov	r5, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	b913      	cbnz	r3, 8005d2c <_fflush_r+0x10>
 8005d26:	2500      	movs	r5, #0
 8005d28:	4628      	mov	r0, r5
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	b118      	cbz	r0, 8005d36 <_fflush_r+0x1a>
 8005d2e:	6a03      	ldr	r3, [r0, #32]
 8005d30:	b90b      	cbnz	r3, 8005d36 <_fflush_r+0x1a>
 8005d32:	f7ff fc89 	bl	8005648 <__sinit>
 8005d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f3      	beq.n	8005d26 <_fflush_r+0xa>
 8005d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d40:	07d0      	lsls	r0, r2, #31
 8005d42:	d404      	bmi.n	8005d4e <_fflush_r+0x32>
 8005d44:	0599      	lsls	r1, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_fflush_r+0x32>
 8005d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4a:	f7ff fe59 	bl	8005a00 <__retarget_lock_acquire_recursive>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4621      	mov	r1, r4
 8005d52:	f7ff ff5d 	bl	8005c10 <__sflush_r>
 8005d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d58:	07da      	lsls	r2, r3, #31
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	d4e4      	bmi.n	8005d28 <_fflush_r+0xc>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d4e1      	bmi.n	8005d28 <_fflush_r+0xc>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f7ff fe4c 	bl	8005a02 <__retarget_lock_release_recursive>
 8005d6a:	e7dd      	b.n	8005d28 <_fflush_r+0xc>

08005d6c <__swhatbuf_r>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	460c      	mov	r4, r1
 8005d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d74:	2900      	cmp	r1, #0
 8005d76:	b096      	sub	sp, #88	; 0x58
 8005d78:	4615      	mov	r5, r2
 8005d7a:	461e      	mov	r6, r3
 8005d7c:	da0d      	bge.n	8005d9a <__swhatbuf_r+0x2e>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d84:	f04f 0100 	mov.w	r1, #0
 8005d88:	bf0c      	ite	eq
 8005d8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d8e:	2340      	movne	r3, #64	; 0x40
 8005d90:	2000      	movs	r0, #0
 8005d92:	6031      	str	r1, [r6, #0]
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	b016      	add	sp, #88	; 0x58
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	466a      	mov	r2, sp
 8005d9c:	f000 f848 	bl	8005e30 <_fstat_r>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	dbec      	blt.n	8005d7e <__swhatbuf_r+0x12>
 8005da4:	9901      	ldr	r1, [sp, #4]
 8005da6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005daa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005dae:	4259      	negs	r1, r3
 8005db0:	4159      	adcs	r1, r3
 8005db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db6:	e7eb      	b.n	8005d90 <__swhatbuf_r+0x24>

08005db8 <__smakebuf_r>:
 8005db8:	898b      	ldrh	r3, [r1, #12]
 8005dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dbc:	079d      	lsls	r5, r3, #30
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	d507      	bpl.n	8005dd4 <__smakebuf_r+0x1c>
 8005dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	2301      	movs	r3, #1
 8005dce:	6163      	str	r3, [r4, #20]
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	ab01      	add	r3, sp, #4
 8005dd6:	466a      	mov	r2, sp
 8005dd8:	f7ff ffc8 	bl	8005d6c <__swhatbuf_r>
 8005ddc:	9900      	ldr	r1, [sp, #0]
 8005dde:	4605      	mov	r5, r0
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff fe89 	bl	8005af8 <_malloc_r>
 8005de6:	b948      	cbnz	r0, 8005dfc <__smakebuf_r+0x44>
 8005de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dec:	059a      	lsls	r2, r3, #22
 8005dee:	d4ef      	bmi.n	8005dd0 <__smakebuf_r+0x18>
 8005df0:	f023 0303 	bic.w	r3, r3, #3
 8005df4:	f043 0302 	orr.w	r3, r3, #2
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	e7e3      	b.n	8005dc4 <__smakebuf_r+0xc>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	6020      	str	r0, [r4, #0]
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	9b00      	ldr	r3, [sp, #0]
 8005e08:	6163      	str	r3, [r4, #20]
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	6120      	str	r0, [r4, #16]
 8005e0e:	b15b      	cbz	r3, 8005e28 <__smakebuf_r+0x70>
 8005e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e14:	4630      	mov	r0, r6
 8005e16:	f000 f81d 	bl	8005e54 <_isatty_r>
 8005e1a:	b128      	cbz	r0, 8005e28 <__smakebuf_r+0x70>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	431d      	orrs	r5, r3
 8005e2c:	81a5      	strh	r5, [r4, #12]
 8005e2e:	e7cf      	b.n	8005dd0 <__smakebuf_r+0x18>

08005e30 <_fstat_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	; (8005e50 <_fstat_r+0x20>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	f7fb f830 	bl	8000ea2 <_fstat>
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	d102      	bne.n	8005e4c <_fstat_r+0x1c>
 8005e46:	682b      	ldr	r3, [r5, #0]
 8005e48:	b103      	cbz	r3, 8005e4c <_fstat_r+0x1c>
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
 8005e4e:	bf00      	nop
 8005e50:	200130ac 	.word	0x200130ac

08005e54 <_isatty_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d06      	ldr	r5, [pc, #24]	; (8005e70 <_isatty_r+0x1c>)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	f7fb f82f 	bl	8000ec2 <_isatty>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_isatty_r+0x1a>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_isatty_r+0x1a>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	200130ac 	.word	0x200130ac

08005e74 <_sbrk_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d06      	ldr	r5, [pc, #24]	; (8005e90 <_sbrk_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f000 f808 	bl	8005e94 <_sbrk>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_sbrk_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_sbrk_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	200130ac 	.word	0x200130ac

08005e94 <_sbrk>:
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <_sbrk+0x14>)
 8005e96:	6811      	ldr	r1, [r2, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b909      	cbnz	r1, 8005ea0 <_sbrk+0xc>
 8005e9c:	4903      	ldr	r1, [pc, #12]	; (8005eac <_sbrk+0x18>)
 8005e9e:	6011      	str	r1, [r2, #0]
 8005ea0:	6810      	ldr	r0, [r2, #0]
 8005ea2:	4403      	add	r3, r0
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4770      	bx	lr
 8005ea8:	200130bc 	.word	0x200130bc
 8005eac:	200130c0 	.word	0x200130c0

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
